@charset "UTF-8";@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-display:swap;src:local('Open Sans Regular'),local('OpenSans-Regular'),url(https://fonts.gstatic.com/s/opensans/v17/mem8YaGs126MiZpBA-UFUZ0e.ttf) format('truetype')}@font-face{font-family:'Open Sans';font-style:normal;font-weight:600;font-display:swap;src:local('Open Sans SemiBold'),local('OpenSans-SemiBold'),url(https://fonts.gstatic.com/s/opensans/v17/mem5YaGs126MiZpBA-UNirkOVuhs.ttf) format('truetype')}@font-face{font-family:'Open Sans';font-style:normal;font-weight:700;font-display:swap;src:local('Open Sans Bold'),local('OpenSans-Bold'),url(https://fonts.gstatic.com/s/opensans/v17/mem5YaGs126MiZpBA-UN7rgOVuhs.ttf) format('truetype')}a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font:inherit;vertical-align:baseline}:focus,a:active,a:hover{outline:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:'';content:none}.sochi-banner__parts:before,body:before{content:"";top:0;left:0}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration,input[type=search]::-webkit-search-results-button,input[type=search]::-webkit-search-results-decoration{-webkit-appearance:none;-moz-appearance:none}input[type=search]{-webkit-appearance:none;-moz-appearance:none;box-sizing:content-box}audio,canvas,video{display:inline-block;max-width:100%}[hidden],body.loaded:before{display:none}audio:not([controls]){display:none;height:0}html{font-size:100%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}a:focus{outline:dotted thin}img{border:0;-ms-interpolation-mode:bicubic;vertical-align:middle}figure,form{margin:0}legend{border:0;padding:0;white-space:normal}button,input,select,textarea{font-size:100%;margin:0;vertical-align:baseline}button,input{line-height:normal}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}textarea{overflow:auto;vertical-align:top;resize:vertical}table{border-collapse:collapse;border-spacing:0}button,html,input,select,textarea{color:#222}::-moz-selection{background:#b3d4fc;text-shadow:none}::selection{background:#b3d4fc;text-shadow:none}fieldset{border:0;margin:0;padding:0}.chromeframe{margin:.2em 0;background:#ccc;color:#000;padding:.2em 0}input[type=text]::-ms-clear{display:none;width:0;height:0}input[type=text]::-ms-reveal{display:none;width:0;height:0}input::-webkit-search-cancel-button,input::-webkit-search-decoration,input::-webkit-search-results-button,input::-webkit-search-results-decoration{display:none}body{line-height:1;color:#434650;font:18px/28px "Open Sans"}body:before{position:fixed;width:100%;height:100%;background:url(../img/loader.svg) center center no-repeat rgba(255,255,255,.7);z-index:5000}body .container{-webkit-filter:blur(3px);filter:blur(3px)}body.loaded .container{-webkit-filter:none;filter:none}body.modal-opened{overflow:hidden}.container{max-width:1224px;margin:auto;box-sizing:border-box}.sochi-header{padding:80px 0;overflow:hidden}.sochi-header .container{position:relative}.sochi-header__logo{display:block;width:262px;height:80px;background:url(../img/logo.svg) no-repeat;background-size:auto 100%}.sochi-header__info{position:absolute;right:0;bottom:-90px;color:#D81C63;font:90px/1 "Open Sans";text-transform:uppercase;text-align:right}.sochi-header__info-strong{font-weight:700}.sochi-banner{margin-bottom:80px}.sochi-banner__parts{position:relative}.sochi-banner__parts:before{position:absolute;width:100%;height:100%;background:linear-gradient(to top,rgba(0,0,0,.7) 0,transparent 30%);z-index:4}.sochi-banner__parts:after{content:" ";display:table;clear:both}.sochi-banner__parts-one{float:left;height:600px;overflow:hidden;width:20%;position:relative}.sochi-banner__parts-one-img{position:absolute;-o-object-fit:cover;object-fit:cover;height:100%;width:100%;z-index:1}.sochi-banner__parts-one-line{position:relative;height:300px;overflow:hidden}.sochi-banner__parts-one:first-of-type{width:60%}.sochi-banner .container{position:relative;padding-top:15px;background:url(../img/bg-lines.png)}.sochi-banner__text{position:absolute;left:0;top:-170px;font:90px/90px "Open Sans";color:#fff;text-transform:uppercase;z-index:5}.sochi-banner__text-strong{font-weight:700}.sochi-banner__social{position:absolute;right:0;top:-40px;font-size:0;z-index:5}.sochi-banner__social-one{display:inline-block;background:url(../img/icon-vk.svg) center center no-repeat #D81C63;width:40px;height:40px;margin-left:20px;transition:.3s}.sochi-banner__social-one:hover{background-color:#EC006D}.sochi-banner__social-one.inst{background-image:url(../img/icon-inst.svg)}.sochi-banner__social-one.fb{background-image:url(../img/icon-fb.svg)}.sochi-banner__social-one.tw{background-image:url(../img/icon-twitter.svg)}.sochi-banner.m-footer{margin:0;position:relative}.sochi-banner.m-footer .sochi-banner__parts-one:first-of-type{width:20%}.sochi-banner.m-footer .sochi-banner__parts-one:nth-child(2){width:60%}.sochi-banner__btn{position:absolute;left:50%;top:50%;width:400px;height:60px;background:#D81C63;color:#fff;text-align:center;font:700 20px/58px "Open Sans";text-transform:uppercase;margin:-30px 0 0 -200px;cursor:pointer;z-index:5}.sochi-links__one:before,.sochi-stat__one:before{content:"";left:0}.sochi-banner__btn:hover{background-color:#EC006D}.sochi-links{display:flex;justify-content:space-between;margin-bottom:90px}.sochi-links__one{display:inline-block;font:700 24px/34px "Open Sans";cursor:pointer;text-transform:uppercase;position:relative;white-space:nowrap}.sochi-links__one:before{position:absolute;bottom:-12px;width:0;height:4px;background:#D81C63;transition:.3s}.sochi-links__one:hover:before{width:100%}.sochi-stat{text-align:center;font-size:0}.sochi-stat__one{display:inline-block;width:184px;position:relative;padding-top:130px;margin:0 50px 60px}.sochi-stat__one:before{position:absolute;top:0;width:176px;height:176px;background-color:#fff;background-position:30px 30px;background-repeat:no-repeat;box-shadow:-20px 20px 40px rgba(0,0,0,.1)}.sochi-stat__one:nth-child(4),.sochi-stat__one:nth-child(5){width:200px}.sochi-stat__one:nth-child(1):before{background-image:url(../img/stat-01.svg)}.sochi-stat__one:nth-child(2):before{background-image:url(../img/stat-02.svg)}.sochi-stat__one:nth-child(3):before{background-image:url(../img/stat-03.svg)}.sochi-stat__one:nth-child(4):before{background-image:url(../img/stat-04.svg);left:auto;right:0}.sochi-stat__one:nth-child(5):before{background-image:url(../img/stat-05.svg)}.sochi-stat__one:nth-child(6){width:225px}.sochi-stat__one:nth-child(6):before{background-image:url(../img/stat-06.svg)}.sochi-stat__one:nth-child(7):before{background-image:url(../img/stat-07.svg)}.sochi-stat__one-content{position:relative;font:600 16px/20px "Open Sans";color:#434650;text-align:right;z-index:2}.sochi-stat__one-content-num{color:#D81C63;font:700 70px/78px "Open Sans"}.sochi-about{background:url(../img/bg-about.png) right 0 repeat-y;padding-right:394px;margin-bottom:160px}.sochi-about__title{font:90px/90px "Open Sans";color:#D81C63;text-transform:uppercase;margin-bottom:20px}.sochi-about__title-strong{font-weight:700}.sochi-about__info{font:600 30px/40px "Open Sans";margin-bottom:40px}.sochi-about__text{margin-bottom:45px}.sochi-about__btn{max-width:400px;background:#D81C63;color:#fff;font:600 20px/60px "Open Sans";text-transform:uppercase;text-align:center;cursor:pointer;box-shadow:0 10px 40px rgba(237,12,109,.25);transition:.3s}.sochi-modal__wrap-body-img,.sochi-slider__img{max-width:100%}.sochi-about__btn:hover{background:#EC006D}.sochi-why__title{font:90px/90px "Open Sans";text-transform:uppercase;background:url(../img/icon-why.png) 0 16px no-repeat;color:#D81C63;text-align:right;height:170px}.sochi-why__title-strong{font-weight:700}.sochi-why__img{height:340px;background:url(../img/bg-why.jpg) center 0 no-repeat;background-size:cover}.sochi-directions__title:before,.sochi-why__content-title:before{left:50%;bottom:-30px;height:4px;margin-left:-50px;content:""}.sochi-why__content{background:#D81C63;padding:40px 100px;color:#fff}.sochi-why__content-title{position:relative;text-align:center;font:700 36px/46px "Open Sans";text-transform:uppercase;margin-bottom:115px}.sochi-why__content-title:before{position:absolute;width:100px;background:#fff}.sochi-why__content-blocks{font-size:0}.sochi-why__content-blocks-one{display:inline-block;vertical-align:top;width:50%;padding:0 20px 0 100px;box-sizing:border-box;margin-bottom:50px}.sochi-why__content-blocks-one-title{font:700 24px/34px "Open Sans";text-transform:uppercase;margin-bottom:25px}.sochi-why__content-blocks-one-text{font-size:18px}.sochi-why__content-blocks-one:nth-child(1){background:url(../img/why-icon-01.svg) no-repeat}.sochi-why__content-blocks-one:nth-child(2){background:url(../img/why-icon-02.svg) no-repeat}.sochi-why__content-blocks-one:nth-child(3){background:url(../img/why-icon-03.svg) no-repeat}.sochi-why__content-blocks-one:nth-child(4){background:url(../img/why-icon-04.svg) no-repeat}.sochi-directions,.sochi-slider{background:#434650}.sochi-directions{color:#fff;padding:60px 50px 30px;font-size:0}.sochi-directions__title{position:relative;text-align:center;font:700 36px/46px "Open Sans";text-transform:uppercase;margin-bottom:115px}.sochi-directions__title:before{position:absolute;width:100px;background:#D81C63}.sochi-directions__col{display:inline-block;vertical-align:top;width:50%}.sochi-directions__col-item{padding:0 0 50px 100px;font:600 18px/28px "Open Sans"}.sochi-directions__col-item-title{font:700 24px/34px "Open Sans";text-transform:uppercase;margin-bottom:25px}.sochi-directions__col-item.m-01{background:url(../img/directions-01.svg) no-repeat}.sochi-directions__col-item.m-02{background:url(../img/directions-03.svg) no-repeat}.sochi-directions__col-item.m-03{background:url(../img/directions-05.svg) no-repeat}.sochi-directions__col-item.m-04{background:url(../img/directions-02.svg) no-repeat}.sochi-directions__col-item.m-05{background:url(../img/directions-04.svg) no-repeat}.sochi-directions__col-item.m-06{background:url(../img/directions-06.svg) no-repeat}.sochi-projects{margin:160px 0}.sochi-projects__title{font:90px/90px "Open Sans";text-transform:uppercase;background:url(../img/bg-projects.svg) right 15px no-repeat;color:#D81C63;height:170px}.sochi-projects__title-strong{font-weight:700}.sochi-projects__list{font-size:0}.sochi-projects__list-one{display:inline-block;vertical-align:top;position:relative;height:700px;width:25%;color:#fff;text-align:right;padding:560px 25px 0 0;box-sizing:border-box;font:600 24px/29px "Open Sans";cursor:pointer}.sochi-projects__list-one:before{content:"";position:absolute;right:24px;bottom:24px;width:10px;height:10px}.sochi-projects__list-one:nth-child(odd):before{background:#D81C63}.sochi-projects__list-one:nth-child(even):before{background:#C3E600}.sochi-projects__list-one.pr-01{background:url(../img/projects-01.jpg) center center no-repeat;background-size:cover}.sochi-projects__list-one.pr-02{background:url(../img/projects-02.jpg) center center no-repeat;background-size:cover}.sochi-projects__list-one.pr-03{background:url(../img/projects-03.jpg) center center no-repeat;background-size:cover}.sochi-projects__list-one.pr-04{background:url(../img/projects-04.jpg) center center no-repeat;background-size:cover}.sochi-stories{margin-bottom:160px}.sochi-stories__title{font:90px/90px "Open Sans";text-transform:uppercase;background:url(../img/bg-stories.svg) 0 16px no-repeat;color:#D81C63;text-align:right;height:170px}.sochi-stories__title-strong{font-weight:700}.sochi-stories__list{font-size:0}.sochi-stories__list-one-header{position:relative;padding:338px 15px 30px 40px;color:#fff;background-position:center center;background-repeat:no-repeat;background-size:cover;margin-bottom:30px;min-height:430px;box-sizing:border-box}.sochi-achievements__title,.sochi-footer__title,.sochi-geography__title{color:#D81C63;text-transform:uppercase}.sochi-stories__list-one-header-name{position:relative;z-index:2;font:700 24px/29px "Open Sans"}.sochi-stories__list-one-header-post{position:relative;z-index:2;font:16px/16px "Open Sans"}.sochi-stories__list-one-header:before{content:"";position:absolute;left:0;top:0;width:100%;height:100%;background:linear-gradient(360deg,rgba(0,0,0,.5) 0,transparent 100px,transparent 100%);z-index:1}.sochi-stories__list-one.m-01 .sochi-stories__list-one-header{background-image:url(../img/story-01.jpg)}.sochi-stories__list-one.m-02 .sochi-stories__list-one-header{background-image:url(../img/story-02.jpg)}.sochi-stories__list-one.m-03 .sochi-stories__list-one-header{background-image:url(../img/story-03.jpg)}.sochi-stories__list-one.m-04 .sochi-stories__list-one-header{background-image:url(../img/story-04.jpg)}.sochi-stories__list-one.m-05 .sochi-stories__list-one-header{background-image:url(../img/story-05.jpg)}.sochi-stories__list-one-content{padding:8px 84px 0 24px;font:20px/29px "Open Sans";background:url(../img/icon-quote.svg) no-repeat}.sochi-stories__list .slick-arrow{top:180px}.sochi-achievements{overflow:hidden;margin-bottom:160px}.sochi-achievements__title{font:90px/90px "Open Sans";background:url(../img/bg-achievements.svg) 0 16px no-repeat;text-align:right;height:170px;margin-bottom:65px}.sochi-achievements__title-strong{font-weight:700}.sochi-achievements__list{margin:0 -15px;font-size:0}.sochi-achievements__list-one{display:inline-block;vertical-align:top;width:calc(33.3% - 30px);margin:0 15px;font:600 16px/26px "Open Sans"}.sochi-achievements__list-one:before{content:"";display:block;height:160px;box-shadow:20px 20px 40px rgba(0,0,0,.1);margin-bottom:20px}.sochi-achievements__list-one:nth-child(1):before{background:url(../img/img-forrester.jpg) center center no-repeat #fff;background-size:50% auto}.sochi-achievements__list-one:nth-child(2):before{background:url(../img/img-tech_elite.jpg) center center no-repeat #fff;background-size:auto 70%}.sochi-achievements__list-one:nth-child(3):before{background:url(../img/img-BESTOF.jpg) center center no-repeat #fff;background-size:auto 60%}.sochi-geography{margin-bottom:160px}.sochi-geography__title{font:90px/90px "Open Sans";background:url(../img/bg-geography.svg) right 16px no-repeat;height:170px}.sochi-geography__title-strong{font-weight:700}.sochi-geography__content{position:relative}.sochi-geography__content-text{display:inline-block;vertical-align:top;width:32%;padding-top:75px;font:20px/29px "Open Sans";margin-right:15px}.sochi-modal:before,.sochi-modal__wrap{display:inline-block;vertical-align:middle}.sochi-geography__content-text strong{font-weight:700}.sochi-geography__content-text-block{margin-bottom:40px}.sochi-geography__content:before{content:"";position:absolute;right:0;top:0;width:65%;height:683px;background:url(../img/map.jpg) no-repeat;background-size:100% auto}.sochi-footer__title{font:90px/90px "Open Sans";height:170px;text-align:center}.sochi-footer__title-strong{font-weight:700}.sochi-footer__line{background:#434650;padding:25px 0;color:#fff;font:600 16px/20px "Open Sans"}.sochi-footer__line .container{position:relative;padding:0 65px 0 15px}.sochi-footer__line-top{position:absolute;right:0;top:-5px;width:40px;height:40px;background:url(../img/icon-top.svg) no-repeat;cursor:pointer}.sochi-modal{visibility:hidden;text-align:center;position:fixed;left:0;top:0;width:100%;height:100%;font-size:0;background:#434650;z-index:1000;overflow:auto;opacity:0;transition:.5s}.sochi-modal.show{opacity:1;visibility:visible}.sochi-modal:before{content:"";height:100vh}.sochi-modal__wrap{width:592px;padding:20px 0;box-sizing:border-box}.sochi-modal__wrap-body{background:#fff;text-align:left}.sochi-modal__wrap-body-project{padding:24px 24px 64px}.sochi-modal__wrap-body-project-title{font:700 18px/28px "Open Sans";text-transform:uppercase;margin-bottom:10px}.sochi-modal__wrap-body-project-text{font:16px/26px "Open Sans"}.sochi-modal__wrap-body-form{display:block;max-width:280px;margin:auto;padding:48px 0 40px}.sochi-modal__wrap-body-form-title{font:700 24px/34px "Open Sans";text-transform:uppercase;color:#434650;background:url(../img/icon-mail.svg) right 20px no-repeat;margin-bottom:40px}.sochi-modal__wrap-body-form-title.m-check{background:url(../img/icon-check.svg) right 20px no-repeat;margin-bottom:40px}.sochi-modal__wrap-body-form-file,.sochi-modal__wrap-body-form-input{display:block;background:#F5F5F5;width:100%;height:60px;padding:0 16px;margin-bottom:24px;border:0;box-shadow:0;font:700 14px "Open Sans";color:#434650;box-sizing:border-box}.sochi-modal__wrap-body-form-file::-webkit-input-placeholder,.sochi-modal__wrap-body-form-input::-webkit-input-placeholder{color:#9c9da2}.sochi-modal__wrap-body-form-file:-ms-input-placeholder,.sochi-modal__wrap-body-form-input:-ms-input-placeholder{color:#9c9da2}.sochi-modal__wrap-body-form-file::-ms-input-placeholder,.sochi-modal__wrap-body-form-input::-ms-input-placeholder{color:#9c9da2}.sochi-modal__wrap-body-form-file::placeholder,.sochi-modal__wrap-body-form-input::placeholder{color:#9c9da2}.sochi-modal__wrap-body-form-input.error::-webkit-input-placeholder{color:#D81C63}.sochi-modal__wrap-body-form-input.error:-ms-input-placeholder{color:#D81C63}.sochi-modal__wrap-body-form-input.error::-ms-input-placeholder{color:#D81C63}.sochi-modal__wrap-body-form-input.error::placeholder{color:#D81C63}.sochi-modal__wrap-body-form-file{position:relative;overflow:hidden;padding:20px 0 0 16px}.sochi-modal__wrap-body-form-file-input{position:absolute;left:0;top:0;opacity:0;padding:200px 0 0 1000px;z-index:1;cursor:pointer}.sochi-modal__wrap-body-form-file-text{color:#9c9da2;max-width:210px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.sochi-modal__wrap-body-form-file-icon{display:none;position:absolute;right:0;top:0;width:60px;height:60px;background:url(../img/icon-trash.svg) center center no-repeat;cursor:pointer;z-index:2}.sochi-modal__wrap-body-form-file.attach .sochi-modal__wrap-body-form-file-text{color:#434650}.sochi-modal__wrap-body-form-file.attach .sochi-modal__wrap-body-form-file-icon{display:block}.sochi-modal__wrap-body-form-close,.sochi-modal__wrap-body-form-send{height:60px;background:#D81C63;color:#fff;text-align:center;font:700 14px/60px "Open Sans";box-shadow:0 10px 40px rgba(237,12,109,.25);cursor:pointer;transition:.3s}.sochi-modal__wrap-body-form-close:hover,.sochi-modal__wrap-body-form-send:hover{background-color:#EC006D}.sochi-modal__wrap-body-form-text{margin-bottom:90px;font-size:18px}.sochi-modal__wrap-close{display:inline-block;position:relative;margin-top:24px;width:56px;height:56px;border-radius:50%;background:url(../img/icon-close.svg) center center no-repeat #fff;cursor:pointer}.slick-arrow{position:absolute;width:40px;height:40px;background:rgba(0,0,0,.5);top:50%;margin-top:-20px;font-size:0;border:0;padding:0;z-index:10;transition:.3s}.slick-arrow:before{content:"";display:block;width:40px;height:40px;background:url(../img/arrow-left.svg) center center no-repeat}.slick-arrow:hover{background:rgba(0,0,0,.8)}.slick-prev{left:0}.slick-next{right:0}.slick-next:before{-webkit-transform:rotate(180deg);transform:rotate(180deg)}@media (max-width:1366px){.sochi-banner__parts-one{width:23%}.sochi-banner__parts-one:first-of-type{width:54%}.sochi-banner.m-footer .sochi-banner__parts-one:nth-child(1){width:23%}.sochi-banner.m-footer .sochi-banner__parts-one:nth-child(2){width:54%}}@media (max-width:1230px){.container{max-width:934px}.sochi-links{display:block;margin-bottom:20px}.sochi-links__one{margin:0 20px 10px 0}.sochi-links__one:before{display:none}.sochi-geography__content-text{width:35%;margin-right:1%}.sochi-geography__content-map{width:64%}}@media (max-width:768px){.sochi-banner__social,.sochi-footer__line-top{right:15px}.container{padding:0 15px}.sochi-about__title,.sochi-achievements__title,.sochi-banner__text,.sochi-footer__title,.sochi-geography__title,.sochi-projects__title,.sochi-stories__title,.sochi-why__title{font-size:50px;line-height:50px;height:95px}.sochi-about,.sochi-achievements,.sochi-geography,.sochi-projects,.sochi-stories{margin-bottom:80px}.sochi-header{padding:20px 0}.sochi-header__info{font-size:50px;line-height:50px;height:auto;bottom:-10px;right:15px}.sochi-banner{margin-bottom:30px}.sochi-banner__parts-one{height:400px}.sochi-banner__parts-one-line{height:200px}.sochi-banner__parts-one:nth-child(2){display:none}.sochi-banner__parts-one:nth-child(3){width:46%}.sochi-banner.m-footer .sochi-banner__parts-one:nth-child(1){width:54%}.sochi-banner__text{left:15px}.sochi-about{padding-right:100px}.sochi-directions__col,.sochi-why__content-blocks-one{display:block;width:100%}.sochi-projects{margin-top:80px}.sochi-geography__content:before{display:block;position:relative;width:100%}.sochi-geography__content-text{padding:0;width:100%}.sochi-geography__content-text-block{margin-bottom:20px}}@media (max-width:576px){.sochi-about,.sochi-achievements,.sochi-geography,.sochi-projects,.sochi-stories{margin-bottom:60px}.sochi-about__title,.sochi-achievements__title,.sochi-banner__text,.sochi-footer__title,.sochi-geography__title,.sochi-header__info,.sochi-projects__title,.sochi-stories__title,.sochi-why__title{font-size:38px;line-height:38px;height:71px}.sochi-header{padding:20px 0 0}.sochi-header__logo{margin-bottom:30px}.sochi-header__info{position:relative;bottom:-1px;right:0;height:73px}.sochi-banner__parts-one{height:320px}.sochi-banner__parts-one-line{height:160px}.sochi-banner__text{top:-71px}.sochi-banner__social{display:none}.sochi-banner__btn{width:300px;margin-left:-150px}.sochi-links{text-align:center}.sochi-links-one{margin:0 0 10px}.sochi-stat__one{margin:0 20px 60px}.sochi-directions__title,.sochi-why__content-title{margin-bottom:85px}.sochi-about{background:0 0;position:relative;padding:0}.sochi-about:before{content:"";position:absolute;right:0;top:0;background:url(../img/bg-about.png) no-repeat;width:64px;height:64px}.sochi-projects__title,.sochi-why__title{height:53px;background:0 0}.sochi-about__info{font-size:20px;line-height:30px}.sochi-directions__title,.sochi-projects__title,.sochi-why__content-title,.sochi-why__title{font-size:28px;line-height:28px}.sochi-why__content{padding:30px 15px 1px}.sochi-why__content-blocks-one{padding:90px 0 0}.sochi-directions{padding:30px 15px 1px}.sochi-directions__col-item{padding:90px 0 50px}.sochi-projects__list-one{height:560px;padding-top:370px}.sochi-projects__list-one:before{bottom:70px}.sochi-projects__list-one:after{content:"Подробнее";position:absolute;bottom:20px;right:20px;font-size:16px}.sochi-stories__title{background-position:0 0}.sochi-stories__list-one-content{padding:8px 0 0 24px;font-size:16px;line-height:26px}.sochi-achievements__title{margin-bottom:40px}.sochi-achievements__list{margin:0}.sochi-achievements__list-one{display:block;width:100%;margin:0 0 40px}.sochi-geography__title{margin-bottom:40px}.sochi-geography__content:before{height:350px}.sochi-footer__title{font-size:28px;line-height:28px;height:53px}.sochi-footer__line span{display:block}.sochi-modal__wrap{width:95%}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1PcGVuK1NhbnM6NDAwLDYwMCw3MDAmZGlzcGxheT1zd2FwJnN1YnNldD1jeXJpbGxpYyIsInNvY2hpLmNzcyIsInNvY2hpLnNjc3MiLCJwYXJ0cy9fcmVzZXQuc2NzcyIsInBhcnRzL192YXJzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6ImlCQUFBLFdBQ0UsWUFBYSxZQUNiLFdBQVksT0FDWixZQUFhLElBQ2IsYUFBYyxLQUNkLElBQUssMkJBQTRCLDBCQUEyQiwyRUFBMEUsbUJBRXhJLFdBQ0UsWUFBYSxZQUNiLFdBQVksT0FDWixZQUFhLElBQ2IsYUFBYyxLQUNkLElBQUssNEJBQTZCLDJCQUE0QiwrRUFBOEUsbUJBRTlJLFdBQ0UsWUFBYSxZQUNiLFdBQVksT0FDWixZQUFhLElBQ2IsYUFBYyxLQUNkLElBQUssd0JBQXlCLHVCQUF3QiwrRUFBOEUsbUJDQXRJLEVBQ0EsS0FDQSxRQUNBLFFBZkEsT0F5REEsUUFDQSxNQWlCQSxNQXhDQSxFQW5CQSxJQU5BLFdBYkEsS0E4REEsT0FUQSxRQVpBLE9BckJBLEtBQ0EsS0F1QkEsR0F0QkEsSUF5Q0EsUUF4Q0EsSUMxQkEsSUQ2Q0EsR0FDQSxHQW5CQSxHQXdDQSxNQWhCQSxTQWtCQSxXQURBLE9BRUEsT0FsQkEsS0EzQ0EsR0FDQSxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBeURBLE9BQ0EsT0F0RUEsS0F5Q0EsRUFuQ0EsT0FvQkEsSUFDQSxJQUNBLElBdUJBLE1BQ0EsT0FKQSxHQThCQSxLQVBBLEtBQ0EsSUFuRUEsT0F5Q0EsR0EyQkEsT0E1REEsRUFFQSxJQWNBLEVBNkNBLEtBNUNBLEVBQ0EsS0E0Q0EsUUEzQ0EsTUU5QkEsS0YrQkEsT0FDQSxPQUNBLElBeUNBLFFBeENBLElBaUJBLE1BRUEsTUFLQSxHQUpBLE1BR0EsR0FGQSxNQW9CQSxLQW5CQSxHQXJCQSxHQUdBLEVBT0EsR0FUQSxJQTBDQSxNQUNFLE9BQVEsRUFD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RDZIbEIsV0M1SGtCLEtENkhsQixNQzVIa0IsS0Q2SGxCLE9DNUhrQixLRDZIbEIsY0M1SGtCLElENkhsQixXQzVIa0IsMkJBQW1CLE9BQUEsT0FBQSxVQUFuQixLRDZIbEIsT0M1SGtCLFFEOEh4QixhQUNFLFNDNUhzQixTRDZIdEIsTUFBTyxLQUNQLE9DekltQixLRDBJbkIsV0MzSDBCLGVENEgxQixJQUFLLElBQ0wsV0M3SDBCLE1EOEgxQixVQzdJbUIsRUQ4SW5CLE9BQVEsRUFDUixRQy9JbUIsRURnSm5CLFFBQVMsR0FDVCxXQzlIa0IsSUQrSGxCLG9CQUNFLFFDaElnQixHRGlJaEIsUUNoSW9CLE1EaUlwQixNQ2xJZ0IsS0RtSWhCLE9DbElvQixLRG1JcEIsV0NwSWdCLDJCQUFBLE9BQUEsT0FBQSxVRHFJbEIsbUJBQ0UsV0NsSWdCLGVEb0lwQixZQUNFLEtBQU0sRUFFUixZQUNFLE1BQU8sRUFDUCxtQkFDRSxrQkNqSWtDLGVBQ1YsVUFBQSxlRG1JNUIsMEJBQ0UseUJBQ0UsTUFBTyxJQUNQLHVDQUNFLE1DL0hzQixJRGdJMUIsNkRBQ0UsTUFBTyxJQUNULDZEQUNFLE1BQU8sS0FFWCwwQkFDRSxXQUNFLFVDN0h3QixNRDhIMUIsYUFDRSxRQzdId0IsTUQ4SHhCLGNDN0h3QixLRDhIeEIsa0JBQ0UsT0M5SmUsRUFBQSxLQUFBLEtBQUEsRUQrSmYseUJBQ0UsUUNoS2EsS0RpS25CLCtCQUNFLE1DdEhnQixJRHVIaEIsYUNySG9CLEdEc0h0Qiw4QkFDRSxNQ3JIb0IsS0R1SHhCLHlCQ3JGSyxzQkF1Q0wsd0JBR1ksTUFBQSxLRDRDVixXQUNFLFFDckhvQixFQUFBLEtBQ0Esb0JBS0gsMkJEZ0huQixvQkNoSG1CLHFCQUFBLHdCQUFBLHVCQUFBLHNCQUFBLGtCRGlIakIsVUMvSGlCLEtEZ0lqQixZQ3BId0IsS0RxSHhCLE9DakhnQixLRGtIbEIsYUNqSHlDLG9CQUFBLGlCQUFuQixnQkFBbUIsZURrSHZDLGNDakhvQixLRGtIdEIsY0FDRSxRQzdHWSxLQUFBLEVEOEdaLG9CQzVHWSxVQUFBLEtBQ0EsWUFBVyxLQUNYLE9BQUEsS0FDQSxPQUFBLE1BQ0EsTUFBQSxLRDhHZCxjQUNFLGNBQWUsS0N2R2YseUJBQ0ksT0FBQSxNQUNBLDhCQUNBLE9BQVksTUFDWixzQ0FDQSxRQUFRLEtBQ1Isc0NBQ0EsTUFBQSxJQUNBLDZEQUNBLE1BQUEsSUFDQSxvQkFDQSxLQUFBLEtEMkdOLGFDdEdVLGNBQVcsTUFDQyx1QkR1R3RCLCtCQ3RHVSxRQUFBLE1BbEJQLE1BQUEsS0QySEgsZ0JBQ0UsV0FBWSxLQ2xHWixpQ0FDSSxRQUFTLE1Eb0diLFNBQVUsU0NqR1YsTUFBQSxLQUNJLCtCQURILFFBQUEsRUFJTyxNQUFBLEtEa0dSLHFDQUNFLGNBQWUsTUFJckIseUJBQ0UsYUMzRmUsb0JBQUEsaUJBREcsZ0JBQ0gsZUFOUixjQUFBLEtBWVEsb0JBQUEsMkJBQUEsb0JBQUEscUJBQUEsd0JEdUZmLG9CQ3ZGZSx1QkFBQSxzQkFBQSxrQkFaUixVQUFBLEtBZVcsWUFDSCxLRHNGYixPQUFRLEtDaEZaLGNBQ0ksUUFBQSxLQUFBLEVBQUEsRUFDSSxvQkFJQSxjQUFBLEtBQ0ksb0JBQ0EsU0FBQSxTQUVBLE9BQUEsS0FDSSxNQUFBLEVBREgsT0FBQSxLRGdGWCx5QkN0RVUsT0FBQSxNQUNJLDhCQUNBLE9BQUEsTUFHSixvQkFDSSxJQUFBLE1Ec0VkLHNCQ2hFRixRQUFBLEtBQ0ksbUJBQ0ksTUFBQSxNQUtBLFlBQUEsT0Q4RE4sYUNyRFUsV0FBQSxPQUNBLGlCQUdKLE9BQUEsRUFBQSxFQUFBLEtEcUROLGlCQzdDTSxPQUFBLEVBQUEsS0FBQSxLQTBEQyx5QkRXTCwwQkNQWSxjQUNILEtEaEJYLGFDNUNVLGVEOENSLFNDN0NZLFNEOENaLFFDN0NZLEVEOENaLG9CQzVDWSxRQUFBLEdBQ0EsU0FBQSxTQUlSLE1BQUEsRUFDSSxJQUFBLEVBRUEsV0FBQSx5QkFBQSxVQUNJLE1BQUEsS0FFQSxPQUFBLEtEaUVkLHVCQXJCQSxrQkNhTSxPQUFBLEtBQ0ksZURqQlIsbUJDNUNTLFVBQUEsS0Q4Q1AsWUN0Q2MsS0FtQ1gseUJEeUJQLHVCQWRFLDBCQVBGLGtCQ09jLFVBQUEsS0RnQlosWUNmZ0IsS0RIbEIsb0JDNUJVLFFBQUEsS0FBQSxLQUFBLElBV0EsK0JBQ0EsUUFBQSxLQUNILEVBQUEsRUFFRCxrQkFDSSxRQUFBLEtBQUEsS0FDSCxJQVNHLDRCQUNJLFFBQUEsS0FBWSxFQUFBLEtEc0IxQiwwQkNQRixPQUFBLE1BR1EsWUFBQSxNQUtJLGlDQUdKLE9BQUEsS0FTSSxnQ0FDQSxRQUFBLFlBQ0EsU0FBQSxTQUdKLE9BQUEsS0FDSSxNQUFBLEtBRUEsVUFBQSxLRFZWLHNCQ2NVLG9CQUFBLEVBQUEsRURaVixpQ0FDRSxRQ2FZLElBQUEsRUFBWSxFQUFBLEtEWnhCLFVDYVksS0RaWixZQ2FZLEtBS0osMkJBQ0ksY0FBYSxLRGhCM0IsMEJBQ0UsT0NrQmdCLEVBSVIsOEJBQ0ksUUFBVSxNQUdkLE1BQUEsS0FDSSxPQUFBLEVBQWEsRUFDaEIsS0FFRCx3QkFDSSxjQUFZLEtEeEIxQixpQ0M2Qk0sT0FBQSxNRDNCTixxQkM4QlUsVUFBQSxLRDVCUixZQzZCWSxLQUlSLE9BQUEsS0QvQk4seUJDbUNNLFFBQUEsTURqQ04sbUJDbUNVLE1BQUEiLCJmaWxlIjoic29jaGkuY3NzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCJAY2hhcnNldCBcIlVURi04XCI7XG4vKiBodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdG9vbHMvY3NzL3Jlc2V0L1xuICAgdjIuMC1tb2RpZmllZCB8IDIwMTEwMTI2XG4gICBMaWNlbnNlOiBub25lIChwdWJsaWMgZG9tYWluKVxuKi9cbkBpbXBvcnQgdXJsKFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9wZW4rU2Fuczo0MDAsNjAwLDcwMCZkaXNwbGF5PXN3YXAmc3Vic2V0PWN5cmlsbGljXCIpO1xuaHRtbCxcbmJvZHksXG5kaXYsXG5zcGFuLFxuYXBwbGV0LFxub2JqZWN0LFxuaWZyYW1lLFxuaDEsXG5oMixcbmgzLFxuaDQsXG5oNSxcbmg2LFxucCxcbmJsb2NrcXVvdGUsXG5wcmUsXG5hLFxuYWJicixcbmFjcm9ueW0sXG5hZGRyZXNzLFxuYmlnLFxuY2l0ZSxcbmNvZGUsXG5kZWwsXG5kZm4sXG5lbSxcbmltZyxcbmlucyxcbmtiZCxcbnEsXG5zLFxuc2FtcCxcbnNtYWxsLFxuc3RyaWtlLFxuc3Ryb25nLFxuc3ViLFxuc3VwLFxudHQsXG52YXIsXG5iLFxudSxcbmksXG5jZW50ZXIsXG5kbCxcbmR0LFxuZGQsXG5vbCxcbnVsLFxubGksXG5maWVsZHNldCxcbmZvcm0sXG5sYWJlbCxcbmxlZ2VuZCxcbnRhYmxlLFxuY2FwdGlvbixcbnRib2R5LFxudGZvb3QsXG50aGVhZCxcbnRyLFxudGgsXG50ZCxcbmFydGljbGUsXG5hc2lkZSxcbmNhbnZhcyxcbmRldGFpbHMsXG5lbWJlZCxcbmZpZ3VyZSxcbmZpZ2NhcHRpb24sXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tZW51LFxubmF2LFxub3V0cHV0LFxucnVieSxcbnNlY3Rpb24sXG5zdW1tYXJ5LFxudGltZSxcbm1hcmssXG5hdWRpbyxcbnZpZGVvIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IDA7XG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgZm9udDogaW5oZXJpdDtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbi8qIG1ha2Ugc3VyZSB0byBzZXQgc29tZSBmb2N1cyBzdHlsZXMgZm9yIGFjY2Vzc2liaWxpdHkgKi9cbjpmb2N1cyB7XG4gIG91dGxpbmU6IDA7IH1cblxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tZW51LFxubmF2LFxuc2VjdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG5cbmJvZHkge1xuICBsaW5lLWhlaWdodDogMTsgfVxuXG5vbCxcbnVsIHtcbiAgbGlzdC1zdHlsZTogbm9uZTsgfVxuXG5ibG9ja3F1b3RlLFxucSB7XG4gIHF1b3Rlczogbm9uZTsgfVxuXG5ibG9ja3F1b3RlOmJlZm9yZSxcbmJsb2NrcXVvdGU6YWZ0ZXIsXG5xOmJlZm9yZSxcbnE6YWZ0ZXIge1xuICBjb250ZW50OiAnJztcbiAgY29udGVudDogbm9uZTsgfVxuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XG5cbmlucHV0W3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbmlucHV0W3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbixcbmlucHV0W3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtcmVzdWx0cy1idXR0b24sXG5pbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLXJlc3VsdHMtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgLW1vei1hcHBlYXJhbmNlOiBub25lOyB9XG5cbmlucHV0W3R5cGU9c2VhcmNoXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xuICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAtbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDsgfVxuXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvO1xuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICByZXNpemU6IHZlcnRpY2FsOyB9XG5cbi8qKlxuICogQ29ycmVjdCBgaW5saW5lLWJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDYvNy84LzkgYW5kIEZpcmVmb3ggMy5cbiAqL1xuYXVkaW8sXG5jYW52YXMsXG52aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgKmRpc3BsYXk6IGlubGluZTtcbiAgKnpvb206IDE7XG4gIG1heC13aWR0aDogMTAwJTsgfVxuXG4vKipcbiAqIFByZXZlbnQgbW9kZXJuIGJyb3dzZXJzIGZyb20gZGlzcGxheWluZyBgYXVkaW9gIHdpdGhvdXQgY29udHJvbHMuXG4gKiBSZW1vdmUgZXhjZXNzIGhlaWdodCBpbiBpT1MgNSBkZXZpY2VzLlxuICovXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDA7IH1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgNy84LzksIEZpcmVmb3ggMywgYW5kIFNhZmFyaSA0LlxuICogS25vd24gaXNzdWU6IG5vIElFIDYgc3VwcG9ydC5cbiAqL1xuW2hpZGRlbl0ge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0ZXh0IHJlc2l6aW5nIG9kZGx5IGluIElFIDYvNyB3aGVuIGJvZHkgYGZvbnQtc2l6ZWAgaXMgc2V0IHVzaW5nXG4gKiAgICBgZW1gIHVuaXRzLlxuICogMi4gUHJldmVudCBpT1MgdGV4dCBzaXplIGFkanVzdCBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2UsIHdpdGhvdXQgZGlzYWJsaW5nXG4gKiAgICB1c2VyIHpvb20uXG4gKi9cbmh0bWwge1xuICBmb250LXNpemU6IDEwMCU7XG4gIC8qIDEgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBBZGRyZXNzIGBvdXRsaW5lYCBpbmNvbnNpc3RlbmN5IGJldHdlZW4gQ2hyb21lIGFuZCBvdGhlciBicm93c2Vycy5cbiAqL1xuYTpmb2N1cyB7XG4gIG91dGxpbmU6IHRoaW4gZG90dGVkOyB9XG5cbi8qKlxuICogSW1wcm92ZSByZWFkYWJpbGl0eSB3aGVuIGZvY3VzZWQgYW5kIGFsc28gbW91c2UgaG92ZXJlZCBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG4gIG91dGxpbmU6IDA7IH1cblxuLyoqXG4gKiAxLiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDYvNy84LzkgYW5kIEZpcmVmb3ggMy5cbiAqIDIuIEltcHJvdmUgaW1hZ2UgcXVhbGl0eSB3aGVuIHNjYWxlZCBpbiBJRSA3LlxuICovXG5pbWcge1xuICBib3JkZXI6IDA7XG4gIC8qIDEgKi9cbiAgLW1zLWludGVycG9sYXRpb24tbW9kZTogYmljdWJpYztcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogQWRkcmVzcyBtYXJnaW4gbm90IHByZXNlbnQgaW4gSUUgNi83LzgvOSwgU2FmYXJpIDUsIGFuZCBPcGVyYSAxMS5cbiAqL1xuZmlndXJlIHtcbiAgbWFyZ2luOiAwOyB9XG5cbi8qKlxuICogQ29ycmVjdCBtYXJnaW4gZGlzcGxheWVkIG9kZGx5IGluIElFIDYvNy5cbiAqL1xuZm9ybSB7XG4gIG1hcmdpbjogMDsgfVxuXG4vKipcbiAqIERlZmluZSBjb25zaXN0ZW50IGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZy5cbiAqL1xuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07IH1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGNvbG9yIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgNi83LzgvOS5cbiAqIDIuIENvcnJlY3QgdGV4dCBub3Qgd3JhcHBpbmcgaW4gRmlyZWZveCAzLlxuICogMy4gQ29ycmVjdCBhbGlnbm1lbnQgZGlzcGxheWVkIG9kZGx5IGluIElFIDYvNy5cbiAqL1xubGVnZW5kIHtcbiAgYm9yZGVyOiAwO1xuICAvKiAxICovXG4gIHBhZGRpbmc6IDA7XG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XG4gIC8qIDIgKi9cbiAgKm1hcmdpbi1sZWZ0OiAtN3B4O1xuICAvKiAzICovIH1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGZvbnQgc2l6ZSBub3QgYmVpbmcgaW5oZXJpdGVkIGluIGFsbCBicm93c2Vycy5cbiAqIDIuIEFkZHJlc3MgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gSUUgNi83LCBGaXJlZm94IDMrLCBTYWZhcmkgNSxcbiAqICAgIGFuZCBDaHJvbWUuXG4gKiAzLiBJbXByb3ZlIGFwcGVhcmFuY2UgYW5kIGNvbnNpc3RlbmN5IGluIGFsbCBicm93c2Vycy5cbiAqL1xuYnV0dG9uLFxuaW5wdXQsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgLyogMSAqL1xuICBtYXJnaW46IDA7XG4gIC8qIDIgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAvKiAzICovXG4gICp2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAvKiAzICovIH1cblxuLyoqXG4gKiBBZGRyZXNzIEZpcmVmb3ggMysgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4gKiB0aGUgVUEgc3R5bGVzaGVldC5cbiAqL1xuYnV0dG9uLFxuaW5wdXQge1xuICBsaW5lLWhlaWdodDogbm9ybWFsOyB9XG5cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYHRleHQtdHJhbnNmb3JtYCBpbmhlcml0YW5jZSBmb3IgYGJ1dHRvbmAgYW5kIGBzZWxlY3RgLlxuICogQWxsIG90aGVyIGZvcm0gY29udHJvbCBlbGVtZW50cyBkbyBub3QgaW5oZXJpdCBgdGV4dC10cmFuc2Zvcm1gIHZhbHVlcy5cbiAqIENvcnJlY3QgYGJ1dHRvbmAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gQ2hyb21lLCBTYWZhcmkgNSssIGFuZCBJRSA2Ky5cbiAqIENvcnJlY3QgYHNlbGVjdGAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveCA0KyBhbmQgT3BlcmEuXG4gKi9cbmJ1dHRvbixcbnNlbGVjdCB7XG4gIHRleHQtdHJhbnNmb3JtOiBub25lOyB9XG5cbi8qKlxuICogMS4gQXZvaWQgdGhlIFdlYktpdCBidWcgaW4gQW5kcm9pZCA0LjAuKiB3aGVyZSAoMikgZGVzdHJveXMgbmF0aXZlIGBhdWRpb2BcbiAqICAgIGFuZCBgdmlkZW9gIGNvbnRyb2xzLlxuICogMi4gQ29ycmVjdCBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIGBpbnB1dGAgdHlwZXMgaW4gaU9TLlxuICogMy4gSW1wcm92ZSB1c2FiaWxpdHkgYW5kIGNvbnNpc3RlbmN5IG9mIGN1cnNvciBzdHlsZSBiZXR3ZWVuIGltYWdlLXR5cGVcbiAqICAgIGBpbnB1dGAgYW5kIG90aGVycy5cbiAqIDQuIFJlbW92ZSBpbm5lciBzcGFjaW5nIGluIElFIDcgd2l0aG91dCBhZmZlY3Rpbmcgbm9ybWFsIHRleHQgaW5wdXRzLlxuICogICAgS25vd24gaXNzdWU6IGlubmVyIHNwYWNpbmcgcmVtYWlucyBpbiBJRSA2LlxuICovXG5idXR0b24sXG5odG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIC8qIDIgKi9cbiAgY3Vyc29yOiBwb2ludGVyO1xuICAvKiAzICovXG4gICpvdmVyZmxvdzogdmlzaWJsZTtcbiAgLyogNCAqLyB9XG5cbi8qKlxuICogUmUtc2V0IGRlZmF1bHQgY3Vyc29yIGZvciBkaXNhYmxlZCBlbGVtZW50cy5cbiAqL1xuYnV0dG9uW2Rpc2FibGVkXSxcbmh0bWwgaW5wdXRbZGlzYWJsZWRdIHtcbiAgY3Vyc29yOiBkZWZhdWx0OyB9XG5cbi8qKlxuICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBjb250ZW50LWJveCBpbiBJRSA4LzkuXG4gKiAyLiBSZW1vdmUgZXhjZXNzIHBhZGRpbmcgaW4gSUUgOC85LlxuICogMy4gUmVtb3ZlIGV4Y2VzcyBwYWRkaW5nIGluIElFIDcuXG4gKiAgICBLbm93biBpc3N1ZTogZXhjZXNzIHBhZGRpbmcgcmVtYWlucyBpbiBJRSA2LlxuICovXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sXG5pbnB1dFt0eXBlPVwicmFkaW9cIl0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAvKiAxICovXG4gIHBhZGRpbmc6IDA7XG4gIC8qIDIgKi9cbiAgKmhlaWdodDogMTNweDtcbiAgLyogMyAqL1xuICAqd2lkdGg6IDEzcHg7XG4gIC8qIDMgKi8gfVxuXG4vKipcbiAqIDEuIEFkZHJlc3MgYGFwcGVhcmFuY2VgIHNldCB0byBgc2VhcmNoZmllbGRgIGluIFNhZmFyaSA1IGFuZCBDaHJvbWUuXG4gKiAyLiBBZGRyZXNzIGBib3gtc2l6aW5nYCBzZXQgdG8gYGJvcmRlci1ib3hgIGluIFNhZmFyaSA1IGFuZCBDaHJvbWVcbiAqICAgIChpbmNsdWRlIGAtbW96YCB0byBmdXR1cmUtcHJvb2YpLlxuICovXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XG4gIC8qIDEgKi9cbiAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLyogMiAqL1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDsgfVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBzZWFyY2ggY2FuY2VsIGJ1dHRvbiBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lXG4gKiBvbiBPUyBYLlxuICovXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgfVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCAzKy5cbiAqL1xuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7IH1cblxuLyoqXG4gKiAxLiBSZW1vdmUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgNi83LzgvOS5cbiAqIDIuIEltcHJvdmUgcmVhZGFiaWxpdHkgYW5kIGFsaWdubWVudCBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLlxuICovXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XG5cbmh0bWwsXG5idXR0b24sXG5pbnB1dCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgY29sb3I6ICMyMjI7IH1cblxuOjotbW96LXNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQ6ICNiM2Q0ZmM7XG4gIHRleHQtc2hhZG93OiBub25lOyB9XG5cbjo6c2VsZWN0aW9uIHtcbiAgYmFja2dyb3VuZDogI2IzZDRmYztcbiAgdGV4dC1zaGFkb3c6IG5vbmU7IH1cblxuaW1nIHtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfVxuXG5maWVsZHNldCB7XG4gIGJvcmRlcjogMDtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwOyB9XG5cbnRleHRhcmVhIHtcbiAgcmVzaXplOiB2ZXJ0aWNhbDsgfVxuXG4uY2hyb21lZnJhbWUge1xuICBtYXJnaW46IDAuMmVtIDA7XG4gIGJhY2tncm91bmQ6ICNjY2M7XG4gIGNvbG9yOiAjMDAwO1xuICBwYWRkaW5nOiAwLjJlbSAwOyB9XG5cbmlucHV0W3R5cGU9dGV4dF06Oi1tcy1jbGVhciB7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6IDA7IH1cblxuaW5wdXRbdHlwZT10ZXh0XTo6LW1zLXJldmVhbCB7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6IDA7IH1cblxuaW5wdXQ6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24sXG5pbnB1dDo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbmlucHV0Ojotd2Via2l0LXNlYXJjaC1yZXN1bHRzLWJ1dHRvbixcbmlucHV0Ojotd2Via2l0LXNlYXJjaC1yZXN1bHRzLWRlY29yYXRpb24ge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbmJvZHkge1xuICBjb2xvcjogIzQzNDY1MDtcbiAgZm9udDogMThweC8yOHB4IFwiT3BlbiBTYW5zXCI7IH1cbiAgYm9keTpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIGxlZnQ6IDBweDtcbiAgICB0b3A6IDBweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpIHVybChcIi4uL2ltZy9sb2FkZXIuc3ZnXCIpIGNlbnRlciBjZW50ZXIgbm8tcmVwZWF0O1xuICAgIHotaW5kZXg6IDUwMDA7IH1cbiAgYm9keSAuY29udGFpbmVyIHtcbiAgICBmaWx0ZXI6IGJsdXIoM3B4KTsgfVxuICBib2R5LmxvYWRlZCAuY29udGFpbmVyIHtcbiAgICBmaWx0ZXI6IG5vbmU7IH1cbiAgYm9keS5sb2FkZWQ6YmVmb3JlIHtcbiAgICBkaXNwbGF5OiBub25lOyB9XG4gIGJvZHkubW9kYWwtb3BlbmVkIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuOyB9XG5cbi5jb250YWluZXIge1xuICBtYXgtd2lkdGg6IDEyMjRweDtcbiAgbWFyZ2luOiBhdXRvO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XG5cbi5zb2NoaS1oZWFkZXIge1xuICBwYWRkaW5nOiA4MHB4IDBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxuICAuc29jaGktaGVhZGVyIC5jb250YWluZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuICAuc29jaGktaGVhZGVyX19sb2dvIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMjYycHg7XG4gICAgaGVpZ2h0OiA4MHB4O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9sb2dvLnN2Z1wiKSAwcHggMHB4IG5vLXJlcGVhdDtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGF1dG8gMTAwJTsgfVxuICAuc29jaGktaGVhZGVyX19pbmZvIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IDBweDtcbiAgICBib3R0b206IC05MHB4O1xuICAgIGNvbG9yOiAjRDgxQzYzO1xuICAgIGZvbnQ6IDkwcHgvMSBcIk9wZW4gU2Fuc1wiO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7IH1cbiAgICAuc29jaGktaGVhZGVyX19pbmZvLXN0cm9uZyB7XG4gICAgICBmb250LXdlaWdodDogNzAwOyB9XG5cbi5zb2NoaS1iYW5uZXIge1xuICBtYXJnaW4tYm90dG9tOiA4MHB4OyB9XG4gIC5zb2NoaS1iYW5uZXJfX3BhcnRzIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cbiAgICAuc29jaGktYmFubmVyX19wYXJ0czpiZWZvcmUge1xuICAgICAgY29udGVudDogXCJcIjtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGxlZnQ6IDBweDtcbiAgICAgIHRvcDogMHB4O1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gdG9wLCByZ2JhKDAsIDAsIDAsIDAuNykgMCUsIHRyYW5zcGFyZW50IDMwJSk7XG4gICAgICB6LWluZGV4OiA0OyB9XG4gICAgLnNvY2hpLWJhbm5lcl9fcGFydHM6YWZ0ZXIge1xuICAgICAgY29udGVudDogXCIgXCI7XG4gICAgICBkaXNwbGF5OiB0YWJsZTtcbiAgICAgIGNsZWFyOiBib3RoOyB9XG4gICAgLnNvY2hpLWJhbm5lcl9fcGFydHMtb25lIHtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgaGVpZ2h0OiA2MDBweDtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICB3aWR0aDogMjAlO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gICAgICAuc29jaGktYmFubmVyX19wYXJ0cy1vbmUtaW1nIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgei1pbmRleDogMTsgfVxuICAgICAgLnNvY2hpLWJhbm5lcl9fcGFydHMtb25lLWxpbmUge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGhlaWdodDogMzAwcHg7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47IH1cbiAgICAgIC5zb2NoaS1iYW5uZXJfX3BhcnRzLW9uZTpmaXJzdC1vZi10eXBlIHtcbiAgICAgICAgd2lkdGg6IDYwJTsgfVxuICAuc29jaGktYmFubmVyIC5jb250YWluZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBwYWRkaW5nLXRvcDogMTVweDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvYmctbGluZXMucG5nXCIpOyB9XG4gIC5zb2NoaS1iYW5uZXJfX3RleHQge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwcHg7XG4gICAgdG9wOiAtMTcwcHg7XG4gICAgZm9udDogOTBweC85MHB4IFwiT3BlbiBTYW5zXCI7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICB6LWluZGV4OiA1OyB9XG4gICAgLnNvY2hpLWJhbm5lcl9fdGV4dC1zdHJvbmcge1xuICAgICAgZm9udC13ZWlnaHQ6IDcwMDsgfVxuICAuc29jaGktYmFubmVyX19zb2NpYWwge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogMHB4O1xuICAgIHRvcDogLTQwcHg7XG4gICAgZm9udC1zaXplOiAwcHg7XG4gICAgei1pbmRleDogNTsgfVxuICAgIC5zb2NoaS1iYW5uZXJfX3NvY2lhbC1vbmUge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgYmFja2dyb3VuZDogI0Q4MUM2MyB1cmwoXCIuLi9pbWcvaWNvbi12ay5zdmdcIikgY2VudGVyIGNlbnRlciBuby1yZXBlYXQ7XG4gICAgICB3aWR0aDogNDBweDtcbiAgICAgIGhlaWdodDogNDBweDtcbiAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICAgICAgdHJhbnNpdGlvbjogLjNzOyB9XG4gICAgICAuc29jaGktYmFubmVyX19zb2NpYWwtb25lOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0VDMDA2RDsgfVxuICAgICAgLnNvY2hpLWJhbm5lcl9fc29jaWFsLW9uZS5pbnN0IHtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL2ljb24taW5zdC5zdmdcIik7IH1cbiAgICAgIC5zb2NoaS1iYW5uZXJfX3NvY2lhbC1vbmUuZmIge1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvaWNvbi1mYi5zdmdcIik7IH1cbiAgICAgIC5zb2NoaS1iYW5uZXJfX3NvY2lhbC1vbmUudHcge1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvaWNvbi10d2l0dGVyLnN2Z1wiKTsgfVxuICAuc29jaGktYmFubmVyLm0tZm9vdGVyIHtcbiAgICBtYXJnaW46IDBweDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cbiAgLnNvY2hpLWJhbm5lci5tLWZvb3RlciAuc29jaGktYmFubmVyX19wYXJ0cy1vbmU6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgd2lkdGg6IDIwJTsgfVxuICAuc29jaGktYmFubmVyLm0tZm9vdGVyIC5zb2NoaS1iYW5uZXJfX3BhcnRzLW9uZTpudGgtY2hpbGQoMikge1xuICAgIHdpZHRoOiA2MCU7IH1cbiAgLnNvY2hpLWJhbm5lcl9fYnRuIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogNTAlO1xuICAgIHRvcDogNTAlO1xuICAgIHdpZHRoOiA0MDBweDtcbiAgICBoZWlnaHQ6IDYwcHg7XG4gICAgYmFja2dyb3VuZDogI0Q4MUM2MztcbiAgICBjb2xvcjogI2ZmZjtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udDogYm9sZCAyMHB4LzU4cHggXCJPcGVuIFNhbnNcIjtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIG1hcmdpbjogLTMwcHggMHB4IDBweCAtMjAwcHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIHotaW5kZXg6IDU7IH1cbiAgICAuc29jaGktYmFubmVyX19idG46aG92ZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0VDMDA2RDsgfVxuXG4uc29jaGktbGlua3Mge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIG1hcmdpbi1ib3R0b206IDkwcHg7IH1cbiAgLnNvY2hpLWxpbmtzX19vbmUge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBmb250OiBib2xkIDI0cHgvMzRweCBcIk9wZW4gU2Fuc1wiO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XG4gICAgLnNvY2hpLWxpbmtzX19vbmU6YmVmb3JlIHtcbiAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBsZWZ0OiAwcHg7XG4gICAgICBib3R0b206IC0xMnB4O1xuICAgICAgd2lkdGg6IDBweDtcbiAgICAgIGhlaWdodDogNHB4O1xuICAgICAgYmFja2dyb3VuZDogI0Q4MUM2MztcbiAgICAgIHRyYW5zaXRpb246IC4zczsgfVxuICAgIC5zb2NoaS1saW5rc19fb25lOmhvdmVyOmJlZm9yZSB7XG4gICAgICB3aWR0aDogMTAwJTsgfVxuXG4uc29jaGktc3RhdCB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC1zaXplOiAwcHg7IH1cbiAgLnNvY2hpLXN0YXRfX29uZSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiAxODRweDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgcGFkZGluZy10b3A6IDEzMHB4O1xuICAgIG1hcmdpbjogMHB4IDUwcHggNjBweDsgfVxuICAgIC5zb2NoaS1zdGF0X19vbmU6YmVmb3JlIHtcbiAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBsZWZ0OiAwcHg7XG4gICAgICB0b3A6IDBweDtcbiAgICAgIHdpZHRoOiAxNzZweDtcbiAgICAgIGhlaWdodDogMTc2cHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMzBweCAzMHB4O1xuICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICAgIGJveC1zaGFkb3c6IC0yMHB4IDIwcHggNDBweCByZ2JhKDAsIDAsIDAsIDAuMSk7IH1cbiAgICAuc29jaGktc3RhdF9fb25lOm50aC1jaGlsZCgxKTpiZWZvcmUge1xuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL3N0YXQtMDEuc3ZnXCIpOyB9XG4gICAgLnNvY2hpLXN0YXRfX29uZTpudGgtY2hpbGQoMik6YmVmb3JlIHtcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zdGF0LTAyLnN2Z1wiKTsgfVxuICAgIC5zb2NoaS1zdGF0X19vbmU6bnRoLWNoaWxkKDMpOmJlZm9yZSB7XG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvc3RhdC0wMy5zdmdcIik7IH1cbiAgICAuc29jaGktc3RhdF9fb25lOm50aC1jaGlsZCg0KSB7XG4gICAgICB3aWR0aDogMjAwcHg7IH1cbiAgICAgIC5zb2NoaS1zdGF0X19vbmU6bnRoLWNoaWxkKDQpOmJlZm9yZSB7XG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zdGF0LTA0LnN2Z1wiKTtcbiAgICAgICAgbGVmdDogYXV0bztcbiAgICAgICAgcmlnaHQ6IDBweDsgfVxuICAgIC5zb2NoaS1zdGF0X19vbmU6bnRoLWNoaWxkKDUpIHtcbiAgICAgIHdpZHRoOiAyMDBweDsgfVxuICAgICAgLnNvY2hpLXN0YXRfX29uZTpudGgtY2hpbGQoNSk6YmVmb3JlIHtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL3N0YXQtMDUuc3ZnXCIpOyB9XG4gICAgLnNvY2hpLXN0YXRfX29uZTpudGgtY2hpbGQoNikge1xuICAgICAgd2lkdGg6IDIyNXB4OyB9XG4gICAgICAuc29jaGktc3RhdF9fb25lOm50aC1jaGlsZCg2KTpiZWZvcmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvc3RhdC0wNi5zdmdcIik7IH1cbiAgICAuc29jaGktc3RhdF9fb25lOm50aC1jaGlsZCg3KTpiZWZvcmUge1xuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL3N0YXQtMDcuc3ZnXCIpOyB9XG4gICAgLnNvY2hpLXN0YXRfX29uZS1jb250ZW50IHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGZvbnQ6IDYwMCAxNnB4LzIwcHggXCJPcGVuIFNhbnNcIjtcbiAgICAgIGNvbG9yOiAjNDM0NjUwO1xuICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgICB6LWluZGV4OiAyOyB9XG4gICAgICAuc29jaGktc3RhdF9fb25lLWNvbnRlbnQtbnVtIHtcbiAgICAgICAgY29sb3I6ICNEODFDNjM7XG4gICAgICAgIGZvbnQ6IGJvbGQgNzBweC83OHB4IFwiT3BlbiBTYW5zXCI7IH1cblxuLnNvY2hpLWFib3V0IHtcbiAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2JnLWFib3V0LnBuZ1wiKSByaWdodCAwcHggcmVwZWF0LXk7XG4gIHBhZGRpbmctcmlnaHQ6IDM5NHB4O1xuICBtYXJnaW4tYm90dG9tOiAxNjBweDsgfVxuICAuc29jaGktYWJvdXRfX3RpdGxlIHtcbiAgICBmb250OiA5MHB4LzkwcHggXCJPcGVuIFNhbnNcIjtcbiAgICBjb2xvcjogI0Q4MUM2MztcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7IH1cbiAgICAuc29jaGktYWJvdXRfX3RpdGxlLXN0cm9uZyB7XG4gICAgICBmb250LXdlaWdodDogYm9sZDsgfVxuICAuc29jaGktYWJvdXRfX2luZm8ge1xuICAgIGZvbnQ6IDYwMCAzMHB4LzQwcHggXCJPcGVuIFNhbnNcIjtcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4OyB9XG4gIC5zb2NoaS1hYm91dF9fdGV4dCB7XG4gICAgbWFyZ2luLWJvdHRvbTogNDVweDsgfVxuICAuc29jaGktYWJvdXRfX2J0biB7XG4gICAgbWF4LXdpZHRoOiA0MDBweDtcbiAgICBiYWNrZ3JvdW5kOiAjRDgxQzYzO1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGZvbnQ6IDYwMCAyMHB4LzYwcHggXCJPcGVuIFNhbnNcIjtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYm94LXNoYWRvdzogMHB4IDEwcHggNDBweCByZ2JhKDIzNywgMTIsIDEwOSwgMC4yNSk7XG4gICAgdHJhbnNpdGlvbjogLjNzOyB9XG4gICAgLnNvY2hpLWFib3V0X19idG46aG92ZXIge1xuICAgICAgYmFja2dyb3VuZDogI0VDMDA2RDsgfVxuXG4uc29jaGktd2h5X190aXRsZSB7XG4gIGZvbnQ6IDkwcHgvOTBweCBcIk9wZW4gU2Fuc1wiO1xuICBjb2xvcjogI0Q4MUM2MztcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2ljb24td2h5LnBuZ1wiKSAwcHggMTZweCBuby1yZXBlYXQ7XG4gIGNvbG9yOiAjRDgxQzYzO1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgaGVpZ2h0OiAxNzBweDsgfVxuICAuc29jaGktd2h5X190aXRsZS1zdHJvbmcge1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkOyB9XG5cbi5zb2NoaS13aHlfX2ltZyB7XG4gIGhlaWdodDogMzQwcHg7XG4gIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9iZy13aHkuanBnXCIpIGNlbnRlciAwcHggbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyOyB9XG5cbi5zb2NoaS13aHlfX2NvbnRlbnQge1xuICBiYWNrZ3JvdW5kOiAjRDgxQzYzO1xuICBwYWRkaW5nOiA0MHB4IDEwMHB4O1xuICBjb2xvcjogI2ZmZjsgfVxuICAuc29jaGktd2h5X19jb250ZW50LXRpdGxlIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGZvbnQ6IGJvbGQgMzZweC80NnB4IFwiT3BlbiBTYW5zXCI7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBtYXJnaW4tYm90dG9tOiAxMTVweDsgfVxuICAgIC5zb2NoaS13aHlfX2NvbnRlbnQtdGl0bGU6YmVmb3JlIHtcbiAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBsZWZ0OiA1MCU7XG4gICAgICBib3R0b206IC0zMHB4O1xuICAgICAgd2lkdGg6IDEwMHB4O1xuICAgICAgaGVpZ2h0OiA0cHg7XG4gICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgbWFyZ2luLWxlZnQ6IC01MHB4OyB9XG4gIC5zb2NoaS13aHlfX2NvbnRlbnQtYmxvY2tzIHtcbiAgICBmb250LXNpemU6IDBweDsgfVxuICAgIC5zb2NoaS13aHlfX2NvbnRlbnQtYmxvY2tzLW9uZSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgICAgd2lkdGg6IDUwJTtcbiAgICAgIHBhZGRpbmc6IDBweCAyMHB4IDBweCAxMDBweDtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICBtYXJnaW4tYm90dG9tOiA1MHB4OyB9XG4gICAgICAuc29jaGktd2h5X19jb250ZW50LWJsb2Nrcy1vbmUtdGl0bGUge1xuICAgICAgICBmb250OiBib2xkIDI0cHgvMzRweCBcIk9wZW4gU2Fuc1wiO1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyNXB4OyB9XG4gICAgICAuc29jaGktd2h5X19jb250ZW50LWJsb2Nrcy1vbmUtdGV4dCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMThweDsgfVxuICAgICAgLnNvY2hpLXdoeV9fY29udGVudC1ibG9ja3Mtb25lOm50aC1jaGlsZCgxKSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy93aHktaWNvbi0wMS5zdmdcIikgMHB4IDBweCBuby1yZXBlYXQ7IH1cbiAgICAgIC5zb2NoaS13aHlfX2NvbnRlbnQtYmxvY2tzLW9uZTpudGgtY2hpbGQoMikge1xuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvd2h5LWljb24tMDIuc3ZnXCIpIDBweCAwcHggbm8tcmVwZWF0OyB9XG4gICAgICAuc29jaGktd2h5X19jb250ZW50LWJsb2Nrcy1vbmU6bnRoLWNoaWxkKDMpIHtcbiAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL3doeS1pY29uLTAzLnN2Z1wiKSAwcHggMHB4IG5vLXJlcGVhdDsgfVxuICAgICAgLnNvY2hpLXdoeV9fY29udGVudC1ibG9ja3Mtb25lOm50aC1jaGlsZCg0KSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy93aHktaWNvbi0wNC5zdmdcIikgMHB4IDBweCBuby1yZXBlYXQ7IH1cblxuLnNvY2hpLXNsaWRlciB7XG4gIGJhY2tncm91bmQ6ICM0MzQ2NTA7IH1cbiAgLnNvY2hpLXNsaWRlcl9faW1nIHtcbiAgICBtYXgtd2lkdGg6IDEwMCU7IH1cblxuLnNvY2hpLWRpcmVjdGlvbnMge1xuICBiYWNrZ3JvdW5kOiAjNDM0NjUwO1xuICBjb2xvcjogI2ZmZjtcbiAgcGFkZGluZzogNjBweCA1MHB4IDMwcHg7XG4gIGZvbnQtc2l6ZTogMHB4OyB9XG4gIC5zb2NoaS1kaXJlY3Rpb25zX190aXRsZSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBmb250OiBib2xkIDM2cHgvNDZweCBcIk9wZW4gU2Fuc1wiO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgbWFyZ2luLWJvdHRvbTogMTE1cHg7IH1cbiAgICAuc29jaGktZGlyZWN0aW9uc19fdGl0bGU6YmVmb3JlIHtcbiAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBsZWZ0OiA1MCU7XG4gICAgICBib3R0b206IC0zMHB4O1xuICAgICAgd2lkdGg6IDEwMHB4O1xuICAgICAgaGVpZ2h0OiA0cHg7XG4gICAgICBiYWNrZ3JvdW5kOiAjRDgxQzYzO1xuICAgICAgbWFyZ2luLWxlZnQ6IC01MHB4OyB9XG4gIC5zb2NoaS1kaXJlY3Rpb25zX19jb2wge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgIHdpZHRoOiA1MCU7IH1cbiAgICAuc29jaGktZGlyZWN0aW9uc19fY29sLWl0ZW0ge1xuICAgICAgcGFkZGluZzogMHB4IDBweCA1MHB4IDEwMHB4O1xuICAgICAgZm9udDogNjAwIDE4cHgvMjhweCBcIk9wZW4gU2Fuc1wiOyB9XG4gICAgICAuc29jaGktZGlyZWN0aW9uc19fY29sLWl0ZW0tdGl0bGUge1xuICAgICAgICBmb250OiBib2xkIDI0cHgvMzRweCBcIk9wZW4gU2Fuc1wiO1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyNXB4OyB9XG4gICAgICAuc29jaGktZGlyZWN0aW9uc19fY29sLWl0ZW0ubS0wMSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9kaXJlY3Rpb25zLTAxLnN2Z1wiKSAwcHggMHB4IG5vLXJlcGVhdDsgfVxuICAgICAgLnNvY2hpLWRpcmVjdGlvbnNfX2NvbC1pdGVtLm0tMDIge1xuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvZGlyZWN0aW9ucy0wMy5zdmdcIikgMHB4IDBweCBuby1yZXBlYXQ7IH1cbiAgICAgIC5zb2NoaS1kaXJlY3Rpb25zX19jb2wtaXRlbS5tLTAzIHtcbiAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2RpcmVjdGlvbnMtMDUuc3ZnXCIpIDBweCAwcHggbm8tcmVwZWF0OyB9XG4gICAgICAuc29jaGktZGlyZWN0aW9uc19fY29sLWl0ZW0ubS0wNCB7XG4gICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9kaXJlY3Rpb25zLTAyLnN2Z1wiKSAwcHggMHB4IG5vLXJlcGVhdDsgfVxuICAgICAgLnNvY2hpLWRpcmVjdGlvbnNfX2NvbC1pdGVtLm0tMDUge1xuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvZGlyZWN0aW9ucy0wNC5zdmdcIikgMHB4IDBweCBuby1yZXBlYXQ7IH1cbiAgICAgIC5zb2NoaS1kaXJlY3Rpb25zX19jb2wtaXRlbS5tLTA2IHtcbiAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2RpcmVjdGlvbnMtMDYuc3ZnXCIpIDBweCAwcHggbm8tcmVwZWF0OyB9XG5cbi5zb2NoaS1wcm9qZWN0cyB7XG4gIG1hcmdpbjogMTYwcHggMHB4OyB9XG4gIC5zb2NoaS1wcm9qZWN0c19fdGl0bGUge1xuICAgIGZvbnQ6IDkwcHgvOTBweCBcIk9wZW4gU2Fuc1wiO1xuICAgIGNvbG9yOiAjRDgxQzYzO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2JnLXByb2plY3RzLnN2Z1wiKSByaWdodCAxNXB4IG5vLXJlcGVhdDtcbiAgICBjb2xvcjogI0Q4MUM2MztcbiAgICBoZWlnaHQ6IDE3MHB4OyB9XG4gICAgLnNvY2hpLXByb2plY3RzX190aXRsZS1zdHJvbmcge1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cbiAgLnNvY2hpLXByb2plY3RzX19saXN0IHtcbiAgICBmb250LXNpemU6IDBweDsgfVxuICAgIC5zb2NoaS1wcm9qZWN0c19fbGlzdC1vbmUge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGhlaWdodDogNzAwcHg7XG4gICAgICB3aWR0aDogMjUlO1xuICAgICAgY29sb3I6ICNmZmY7XG4gICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICAgIHBhZGRpbmc6IDU2MHB4IDI1cHggMHB4IDBweDtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICBmb250OiA2MDAgMjRweC8yOXB4IFwiT3BlbiBTYW5zXCI7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7IH1cbiAgICAgIC5zb2NoaS1wcm9qZWN0c19fbGlzdC1vbmU6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogMjRweDtcbiAgICAgICAgYm90dG9tOiAyNHB4O1xuICAgICAgICB3aWR0aDogMTBweDtcbiAgICAgICAgaGVpZ2h0OiAxMHB4OyB9XG4gICAgICAuc29jaGktcHJvamVjdHNfX2xpc3Qtb25lOm50aC1jaGlsZChvZGQpOmJlZm9yZSB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNEODFDNjM7IH1cbiAgICAgIC5zb2NoaS1wcm9qZWN0c19fbGlzdC1vbmU6bnRoLWNoaWxkKGV2ZW4pOmJlZm9yZSB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNDM0U2MDA7IH1cbiAgICAgIC5zb2NoaS1wcm9qZWN0c19fbGlzdC1vbmUucHItMDEge1xuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvcHJvamVjdHMtMDEuanBnXCIpIGNlbnRlciBjZW50ZXIgbm8tcmVwZWF0O1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyOyB9XG4gICAgICAuc29jaGktcHJvamVjdHNfX2xpc3Qtb25lLnByLTAyIHtcbiAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL3Byb2plY3RzLTAyLmpwZ1wiKSBjZW50ZXIgY2VudGVyIG5vLXJlcGVhdDtcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjsgfVxuICAgICAgLnNvY2hpLXByb2plY3RzX19saXN0LW9uZS5wci0wMyB7XG4gICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9wcm9qZWN0cy0wMy5qcGdcIikgY2VudGVyIGNlbnRlciBuby1yZXBlYXQ7XG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7IH1cbiAgICAgIC5zb2NoaS1wcm9qZWN0c19fbGlzdC1vbmUucHItMDQge1xuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvcHJvamVjdHMtMDQuanBnXCIpIGNlbnRlciBjZW50ZXIgbm8tcmVwZWF0O1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyOyB9XG5cbi5zb2NoaS1zdG9yaWVzIHtcbiAgbWFyZ2luLWJvdHRvbTogMTYwcHg7IH1cbiAgLnNvY2hpLXN0b3JpZXNfX3RpdGxlIHtcbiAgICBmb250OiA5MHB4LzkwcHggXCJPcGVuIFNhbnNcIjtcbiAgICBjb2xvcjogI0Q4MUM2MztcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9iZy1zdG9yaWVzLnN2Z1wiKSAwcHggMTZweCBuby1yZXBlYXQ7XG4gICAgY29sb3I6ICNEODFDNjM7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgaGVpZ2h0OiAxNzBweDsgfVxuICAgIC5zb2NoaS1zdG9yaWVzX190aXRsZS1zdHJvbmcge1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cbiAgLnNvY2hpLXN0b3JpZXNfX2xpc3Qge1xuICAgIGZvbnQtc2l6ZTogMHB4OyB9XG4gICAgLnNvY2hpLXN0b3JpZXNfX2xpc3Qtb25lLWhlYWRlciB7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBwYWRkaW5nOiAzMzhweCAxNXB4IDMwcHggNDBweDtcbiAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgIG1pbi1oZWlnaHQ6IDQzMHB4O1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuICAgICAgLnNvY2hpLXN0b3JpZXNfX2xpc3Qtb25lLWhlYWRlci1uYW1lIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB6LWluZGV4OiAyO1xuICAgICAgICBmb250OiBib2xkIDI0cHgvMjlweCBcIk9wZW4gU2Fuc1wiOyB9XG4gICAgICAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUtaGVhZGVyLXBvc3Qge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHotaW5kZXg6IDI7XG4gICAgICAgIGZvbnQ6IDE2cHgvMTZweCBcIk9wZW4gU2Fuc1wiOyB9XG4gICAgICAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUtaGVhZGVyOmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgbGVmdDogMHB4O1xuICAgICAgICB0b3A6IDBweDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDM2MGRlZywgcmdiYSgwLCAwLCAwLCAwLjUpIDAlLCB0cmFuc3BhcmVudCAxMDBweCwgdHJhbnNwYXJlbnQgMTAwJSk7XG4gICAgICAgIHotaW5kZXg6IDE7IH1cbiAgICAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUubS0wMSAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUtaGVhZGVyIHtcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zdG9yeS0wMS5qcGdcIik7IH1cbiAgICAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUubS0wMiAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUtaGVhZGVyIHtcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zdG9yeS0wMi5qcGdcIik7IH1cbiAgICAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUubS0wMyAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUtaGVhZGVyIHtcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zdG9yeS0wMy5qcGdcIik7IH1cbiAgICAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUubS0wNCAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUtaGVhZGVyIHtcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zdG9yeS0wNC5qcGdcIik7IH1cbiAgICAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUubS0wNSAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUtaGVhZGVyIHtcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zdG9yeS0wNS5qcGdcIik7IH1cbiAgICAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUtY29udGVudCB7XG4gICAgICBwYWRkaW5nOiA4cHggODRweCAwcHggMjRweDtcbiAgICAgIGZvbnQ6IDIwcHgvMjlweCBcIk9wZW4gU2Fuc1wiO1xuICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2ljb24tcXVvdGUuc3ZnXCIpIDBweCAwcHggbm8tcmVwZWF0OyB9XG4gICAgLnNvY2hpLXN0b3JpZXNfX2xpc3QgLnNsaWNrLWFycm93IHtcbiAgICAgIHRvcDogMTgwcHg7IH1cblxuLnNvY2hpLWFjaGlldmVtZW50cyB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi1ib3R0b206IDE2MHB4OyB9XG4gIC5zb2NoaS1hY2hpZXZlbWVudHNfX3RpdGxlIHtcbiAgICBmb250OiA5MHB4LzkwcHggXCJPcGVuIFNhbnNcIjtcbiAgICBjb2xvcjogI0Q4MUM2MztcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9iZy1hY2hpZXZlbWVudHMuc3ZnXCIpIDBweCAxNnB4IG5vLXJlcGVhdDtcbiAgICBjb2xvcjogI0Q4MUM2MztcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBoZWlnaHQ6IDE3MHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDY1cHg7IH1cbiAgICAuc29jaGktYWNoaWV2ZW1lbnRzX190aXRsZS1zdHJvbmcge1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cbiAgLnNvY2hpLWFjaGlldmVtZW50c19fbGlzdCB7XG4gICAgbWFyZ2luOiAwcHggLTE1cHg7XG4gICAgZm9udC1zaXplOiAwcHg7IH1cbiAgICAuc29jaGktYWNoaWV2ZW1lbnRzX19saXN0LW9uZSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgICAgd2lkdGg6IGNhbGMoMzMuMyUgLSAzMHB4KTtcbiAgICAgIG1hcmdpbjogMHB4IDE1cHg7XG4gICAgICBmb250OiA2MDAgMTZweC8yNnB4IFwiT3BlbiBTYW5zXCI7IH1cbiAgICAgIC5zb2NoaS1hY2hpZXZlbWVudHNfX2xpc3Qtb25lOmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBoZWlnaHQ6IDE2MHB4O1xuICAgICAgICBib3gtc2hhZG93OiAyMHB4IDIwcHggNDBweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7IH1cbiAgICAgIC5zb2NoaS1hY2hpZXZlbWVudHNfX2xpc3Qtb25lOm50aC1jaGlsZCgxKTpiZWZvcmUge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmIHVybChcIi4uL2ltZy9pbWctZm9ycmVzdGVyLmpwZ1wiKSBjZW50ZXIgY2VudGVyIG5vLXJlcGVhdDtcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiA1MCUgYXV0bzsgfVxuICAgICAgLnNvY2hpLWFjaGlldmVtZW50c19fbGlzdC1vbmU6bnRoLWNoaWxkKDIpOmJlZm9yZSB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmYgdXJsKFwiLi4vaW1nL2ltZy10ZWNoX2VsaXRlLmpwZ1wiKSBjZW50ZXIgY2VudGVyIG5vLXJlcGVhdDtcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBhdXRvIDcwJTsgfVxuICAgICAgLnNvY2hpLWFjaGlldmVtZW50c19fbGlzdC1vbmU6bnRoLWNoaWxkKDMpOmJlZm9yZSB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmYgdXJsKFwiLi4vaW1nL2ltZy1CRVNUT0YuanBnXCIpIGNlbnRlciBjZW50ZXIgbm8tcmVwZWF0O1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGF1dG8gNjAlOyB9XG5cbi5zb2NoaS1nZW9ncmFwaHkge1xuICBtYXJnaW4tYm90dG9tOiAxNjBweDsgfVxuICAuc29jaGktZ2VvZ3JhcGh5X190aXRsZSB7XG4gICAgZm9udDogOTBweC85MHB4IFwiT3BlbiBTYW5zXCI7XG4gICAgY29sb3I6ICNEODFDNjM7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvYmctZ2VvZ3JhcGh5LnN2Z1wiKSByaWdodCAxNnB4IG5vLXJlcGVhdDtcbiAgICBjb2xvcjogI0Q4MUM2MztcbiAgICBoZWlnaHQ6IDE3MHB4OyB9XG4gICAgLnNvY2hpLWdlb2dyYXBoeV9fdGl0bGUtc3Ryb25nIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOyB9XG4gIC5zb2NoaS1nZW9ncmFwaHlfX2NvbnRlbnQge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuICAgIC5zb2NoaS1nZW9ncmFwaHlfX2NvbnRlbnQtdGV4dCB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOyB9XG4gICAgLnNvY2hpLWdlb2dyYXBoeV9fY29udGVudC10ZXh0IHtcbiAgICAgIHdpZHRoOiAzMiU7XG4gICAgICBwYWRkaW5nLXRvcDogNzVweDtcbiAgICAgIGZvbnQ6IDIwcHgvMjlweCBcIk9wZW4gU2Fuc1wiO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxNXB4OyB9XG4gICAgICAuc29jaGktZ2VvZ3JhcGh5X19jb250ZW50LXRleHQgc3Ryb25nIHtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cbiAgICAgIC5zb2NoaS1nZW9ncmFwaHlfX2NvbnRlbnQtdGV4dC1ibG9jayB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDQwcHg7IH1cbiAgICAuc29jaGktZ2VvZ3JhcGh5X19jb250ZW50OmJlZm9yZSB7XG4gICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgcmlnaHQ6IDBweDtcbiAgICAgIHRvcDogMHB4O1xuICAgICAgd2lkdGg6IDY1JTtcbiAgICAgIGhlaWdodDogNjgzcHg7XG4gICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvbWFwLmpwZ1wiKSAwcHggMHB4IG5vLXJlcGVhdDtcbiAgICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSBhdXRvOyB9XG5cbi5zb2NoaS1mb290ZXJfX3RpdGxlIHtcbiAgZm9udDogOTBweC85MHB4IFwiT3BlbiBTYW5zXCI7XG4gIGNvbG9yOiAjRDgxQzYzO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBjb2xvcjogI0Q4MUM2MztcbiAgaGVpZ2h0OiAxNzBweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gIC5zb2NoaS1mb290ZXJfX3RpdGxlLXN0cm9uZyB7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cblxuLnNvY2hpLWZvb3Rlcl9fbGluZSB7XG4gIGJhY2tncm91bmQ6ICM0MzQ2NTA7XG4gIHBhZGRpbmc6IDI1cHggMHB4O1xuICBjb2xvcjogI2ZmZjtcbiAgZm9udDogNjAwIDE2cHgvMjBweCBcIk9wZW4gU2Fuc1wiOyB9XG4gIC5zb2NoaS1mb290ZXJfX2xpbmUgLmNvbnRhaW5lciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHBhZGRpbmc6IDBweCA2NXB4IDBweCAxNXB4OyB9XG4gIC5zb2NoaS1mb290ZXJfX2xpbmUtdG9wIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IDBweDtcbiAgICB0b3A6IC01cHg7XG4gICAgd2lkdGg6IDQwcHg7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9pY29uLXRvcC5zdmdcIikgMHB4IDBweCBuby1yZXBlYXQ7XG4gICAgY3Vyc29yOiBwb2ludGVyOyB9XG5cbi5zb2NoaS1tb2RhbCB7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIGxlZnQ6IDBweDtcbiAgdG9wOiAwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGZvbnQtc2l6ZTogMHB4O1xuICBiYWNrZ3JvdW5kOiAjNDM0NjUwO1xuICB6LWluZGV4OiAxMDAwO1xuICBvdmVyZmxvdzogYXV0bztcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogLjVzOyB9XG4gIC5zb2NoaS1tb2RhbC5zaG93IHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIHZpc2liaWxpdHk6IHZpc2libGU7IH1cbiAgLnNvY2hpLW1vZGFsOmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICBoZWlnaHQ6IDEwMHZoOyB9XG4gIC5zb2NoaS1tb2RhbF9fd3JhcCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgd2lkdGg6IDU5MnB4O1xuICAgIHBhZGRpbmc6IDIwcHggMHB4O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cbiAgICAuc29jaGktbW9kYWxfX3dyYXAtYm9keSB7XG4gICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgdGV4dC1hbGlnbjogbGVmdDsgfVxuICAgICAgLnNvY2hpLW1vZGFsX193cmFwLWJvZHktaW1nIHtcbiAgICAgICAgbWF4LXdpZHRoOiAxMDAlOyB9XG4gICAgICAuc29jaGktbW9kYWxfX3dyYXAtYm9keS1wcm9qZWN0IHtcbiAgICAgICAgcGFkZGluZzogMjRweCAyNHB4IDY0cHg7IH1cbiAgICAgICAgLnNvY2hpLW1vZGFsX193cmFwLWJvZHktcHJvamVjdC10aXRsZSB7XG4gICAgICAgICAgZm9udDogYm9sZCAxOHB4LzI4cHggXCJPcGVuIFNhbnNcIjtcbiAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7IH1cbiAgICAgICAgLnNvY2hpLW1vZGFsX193cmFwLWJvZHktcHJvamVjdC10ZXh0IHtcbiAgICAgICAgICBmb250OiAxNnB4LzI2cHggXCJPcGVuIFNhbnNcIjsgfVxuICAgICAgLnNvY2hpLW1vZGFsX193cmFwLWJvZHktZm9ybSB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBtYXgtd2lkdGg6IDI4MHB4O1xuICAgICAgICBtYXJnaW46IGF1dG87XG4gICAgICAgIHBhZGRpbmc6IDQ4cHggMHB4IDQwcHg7IH1cbiAgICAgICAgLnNvY2hpLW1vZGFsX193cmFwLWJvZHktZm9ybS10aXRsZSB7XG4gICAgICAgICAgZm9udDogYm9sZCAyNHB4LzM0cHggXCJPcGVuIFNhbnNcIjtcbiAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgIGNvbG9yOiAjNDM0NjUwO1xuICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9pY29uLW1haWwuc3ZnXCIpIHJpZ2h0IDIwcHggbm8tcmVwZWF0O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDQwcHg7IH1cbiAgICAgICAgICAuc29jaGktbW9kYWxfX3dyYXAtYm9keS1mb3JtLXRpdGxlLm0tY2hlY2sge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2ljb24tY2hlY2suc3ZnXCIpIHJpZ2h0IDIwcHggbm8tcmVwZWF0O1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNDBweDsgfVxuICAgICAgICAuc29jaGktbW9kYWxfX3dyYXAtYm9keS1mb3JtLWlucHV0LCAuc29jaGktbW9kYWxfX3dyYXAtYm9keS1mb3JtLWZpbGUge1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIGJhY2tncm91bmQ6ICNGNUY1RjU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiA2MHB4O1xuICAgICAgICAgIHBhZGRpbmc6IDBweCAxNnB4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XG4gICAgICAgICAgYm9yZGVyOiAwcHg7XG4gICAgICAgICAgYm94LXNoYWRvdzogMHB4O1xuICAgICAgICAgIGZvbnQ6IGJvbGQgMTRweCBcIk9wZW4gU2Fuc1wiO1xuICAgICAgICAgIGNvbG9yOiAjNDM0NjUwO1xuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cbiAgICAgICAgICAuc29jaGktbW9kYWxfX3dyYXAtYm9keS1mb3JtLWlucHV0OjpwbGFjZWhvbGRlciwgLnNvY2hpLW1vZGFsX193cmFwLWJvZHktZm9ybS1maWxlOjpwbGFjZWhvbGRlciB7XG4gICAgICAgICAgICBjb2xvcjogIzljOWRhMjsgfVxuICAgICAgICAuc29jaGktbW9kYWxfX3dyYXAtYm9keS1mb3JtLWlucHV0LmVycm9yOjpwbGFjZWhvbGRlciB7XG4gICAgICAgICAgY29sb3I6ICNEODFDNjM7IH1cbiAgICAgICAgLnNvY2hpLW1vZGFsX193cmFwLWJvZHktZm9ybS1maWxlIHtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICBwYWRkaW5nOiAyMHB4IDBweCAwcHggMTZweDsgfVxuICAgICAgICAgIC5zb2NoaS1tb2RhbF9fd3JhcC1ib2R5LWZvcm0tZmlsZS1pbnB1dCB7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICBsZWZ0OiAwcHg7XG4gICAgICAgICAgICB0b3A6IDBweDtcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgICBwYWRkaW5nOiAyMDBweCAwcHggMHB4IDEwMDBweDtcbiAgICAgICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7IH1cbiAgICAgICAgICAuc29jaGktbW9kYWxfX3dyYXAtYm9keS1mb3JtLWZpbGUtdGV4dCB7XG4gICAgICAgICAgICBjb2xvcjogIzljOWRhMjtcbiAgICAgICAgICAgIG1heC13aWR0aDogMjEwcHg7XG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XG4gICAgICAgICAgLnNvY2hpLW1vZGFsX193cmFwLWJvZHktZm9ybS1maWxlLWljb24ge1xuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHJpZ2h0OiAwcHg7XG4gICAgICAgICAgICB0b3A6IDBweDtcbiAgICAgICAgICAgIHdpZHRoOiA2MHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiA2MHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2ljb24tdHJhc2guc3ZnXCIpIGNlbnRlciBjZW50ZXIgbm8tcmVwZWF0O1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgei1pbmRleDogMjsgfVxuICAgICAgICAgIC5zb2NoaS1tb2RhbF9fd3JhcC1ib2R5LWZvcm0tZmlsZS5hdHRhY2ggLnNvY2hpLW1vZGFsX193cmFwLWJvZHktZm9ybS1maWxlLXRleHQge1xuICAgICAgICAgICAgY29sb3I6ICM0MzQ2NTA7IH1cbiAgICAgICAgICAuc29jaGktbW9kYWxfX3dyYXAtYm9keS1mb3JtLWZpbGUuYXR0YWNoIC5zb2NoaS1tb2RhbF9fd3JhcC1ib2R5LWZvcm0tZmlsZS1pY29uIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOyB9XG4gICAgICAgIC5zb2NoaS1tb2RhbF9fd3JhcC1ib2R5LWZvcm0tc2VuZCwgLnNvY2hpLW1vZGFsX193cmFwLWJvZHktZm9ybS1jbG9zZSB7XG4gICAgICAgICAgaGVpZ2h0OiA2MHB4O1xuICAgICAgICAgIGJhY2tncm91bmQ6ICNEODFDNjM7XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIGZvbnQ6IGJvbGQgMTRweC82MHB4IFwiT3BlbiBTYW5zXCI7XG4gICAgICAgICAgYm94LXNoYWRvdzogMHB4IDEwcHggNDBweCByZ2JhKDIzNywgMTIsIDEwOSwgMC4yNSk7XG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgIHRyYW5zaXRpb246IC4zczsgfVxuICAgICAgICAgIC5zb2NoaS1tb2RhbF9fd3JhcC1ib2R5LWZvcm0tc2VuZDpob3ZlciwgLnNvY2hpLW1vZGFsX193cmFwLWJvZHktZm9ybS1jbG9zZTpob3ZlciB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUMwMDZEOyB9XG4gICAgICAgIC5zb2NoaS1tb2RhbF9fd3JhcC1ib2R5LWZvcm0tdGV4dCB7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogOTBweDtcbiAgICAgICAgICBmb250LXNpemU6IDE4cHg7IH1cbiAgICAuc29jaGktbW9kYWxfX3dyYXAtY2xvc2Uge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgbWFyZ2luLXRvcDogMjRweDtcbiAgICAgIHdpZHRoOiA1NnB4O1xuICAgICAgaGVpZ2h0OiA1NnB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgYmFja2dyb3VuZDogI2ZmZiB1cmwoXCIuLi9pbWcvaWNvbi1jbG9zZS5zdmdcIikgY2VudGVyIGNlbnRlciBuby1yZXBlYXQ7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7IH1cblxuLnNsaWNrLWFycm93IHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aWR0aDogNDBweDtcbiAgaGVpZ2h0OiA0MHB4O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNSk7XG4gIHRvcDogNTAlO1xuICBtYXJnaW4tdG9wOiAtMjBweDtcbiAgZm9udC1zaXplOiAwcHg7XG4gIGJvcmRlcjogMHB4O1xuICBwYWRkaW5nOiAwcHg7XG4gIHotaW5kZXg6IDEwO1xuICB0cmFuc2l0aW9uOiAuM3M7IH1cbiAgLnNsaWNrLWFycm93OmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogNDBweDtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2Fycm93LWxlZnQuc3ZnXCIpIGNlbnRlciBjZW50ZXIgbm8tcmVwZWF0OyB9XG4gIC5zbGljay1hcnJvdzpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjgpOyB9XG5cbi5zbGljay1wcmV2IHtcbiAgbGVmdDogMHB4OyB9XG5cbi5zbGljay1uZXh0IHtcbiAgcmlnaHQ6IDBweDsgfVxuICAuc2xpY2stbmV4dDpiZWZvcmUge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7IH1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDEzNjZweCkge1xuICAuc29jaGktYmFubmVyX19wYXJ0cy1vbmUge1xuICAgIHdpZHRoOiAyMyU7IH1cbiAgICAuc29jaGktYmFubmVyX19wYXJ0cy1vbmU6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICB3aWR0aDogNTQlOyB9XG4gIC5zb2NoaS1iYW5uZXIubS1mb290ZXIgLnNvY2hpLWJhbm5lcl9fcGFydHMtb25lOm50aC1jaGlsZCgxKSB7XG4gICAgd2lkdGg6IDIzJTsgfVxuICAuc29jaGktYmFubmVyLm0tZm9vdGVyIC5zb2NoaS1iYW5uZXJfX3BhcnRzLW9uZTpudGgtY2hpbGQoMikge1xuICAgIHdpZHRoOiA1NCU7IH0gfVxuXG5AbWVkaWEgKG1heC13aWR0aDogMTIzMHB4KSB7XG4gIC5jb250YWluZXIge1xuICAgIG1heC13aWR0aDogOTM0cHg7IH1cbiAgLnNvY2hpLWxpbmtzIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4OyB9XG4gICAgLnNvY2hpLWxpbmtzX19vbmUge1xuICAgICAgbWFyZ2luOiAwcHggMjBweCAxMHB4IDBweDsgfVxuICAgICAgLnNvY2hpLWxpbmtzX19vbmU6YmVmb3JlIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTsgfVxuICAuc29jaGktZ2VvZ3JhcGh5X19jb250ZW50LXRleHQge1xuICAgIHdpZHRoOiAzNSU7XG4gICAgbWFyZ2luLXJpZ2h0OiAxJTsgfVxuICAuc29jaGktZ2VvZ3JhcGh5X19jb250ZW50LW1hcCB7XG4gICAgd2lkdGg6IDY0JTsgfSB9XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAwcHggMTVweDsgfVxuICAuc29jaGktYmFubmVyX190ZXh0LCAuc29jaGktYWJvdXRfX3RpdGxlLCAuc29jaGktd2h5X190aXRsZSwgLnNvY2hpLXByb2plY3RzX190aXRsZSwgLnNvY2hpLXN0b3JpZXNfX3RpdGxlLCAuc29jaGktYWNoaWV2ZW1lbnRzX190aXRsZSwgLnNvY2hpLWdlb2dyYXBoeV9fdGl0bGUsIC5zb2NoaS1mb290ZXJfX3RpdGxlIHtcbiAgICBmb250LXNpemU6IDUwcHg7XG4gICAgbGluZS1oZWlnaHQ6IDUwcHg7XG4gICAgaGVpZ2h0OiA5NXB4OyB9XG4gIC5zb2NoaS1hYm91dCwgLnNvY2hpLXByb2plY3RzLCAuc29jaGktc3RvcmllcywgLnNvY2hpLWFjaGlldmVtZW50cywgLnNvY2hpLWdlb2dyYXBoeSB7XG4gICAgbWFyZ2luLWJvdHRvbTogODBweDsgfVxuICAuc29jaGktaGVhZGVyIHtcbiAgICBwYWRkaW5nOiAyMHB4IDBweDsgfVxuICAgIC5zb2NoaS1oZWFkZXJfX2luZm8ge1xuICAgICAgZm9udC1zaXplOiA1MHB4O1xuICAgICAgbGluZS1oZWlnaHQ6IDUwcHg7XG4gICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICBib3R0b206IC0xMHB4O1xuICAgICAgcmlnaHQ6IDE1cHg7IH1cbiAgLnNvY2hpLWJhbm5lciB7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDsgfVxuICAgIC5zb2NoaS1iYW5uZXJfX3BhcnRzLW9uZSB7XG4gICAgICBoZWlnaHQ6IDQwMHB4OyB9XG4gICAgICAuc29jaGktYmFubmVyX19wYXJ0cy1vbmUtbGluZSB7XG4gICAgICAgIGhlaWdodDogMjAwcHg7IH1cbiAgICAgIC5zb2NoaS1iYW5uZXJfX3BhcnRzLW9uZTpudGgtY2hpbGQoMikge1xuICAgICAgICBkaXNwbGF5OiBub25lOyB9XG4gICAgICAuc29jaGktYmFubmVyX19wYXJ0cy1vbmU6bnRoLWNoaWxkKDMpIHtcbiAgICAgICAgd2lkdGg6IDQ2JTsgfVxuICAgIC5zb2NoaS1iYW5uZXIubS1mb290ZXIgLnNvY2hpLWJhbm5lcl9fcGFydHMtb25lOm50aC1jaGlsZCgxKSB7XG4gICAgICB3aWR0aDogNTQlOyB9XG4gICAgLnNvY2hpLWJhbm5lcl9fdGV4dCB7XG4gICAgICBsZWZ0OiAxNXB4OyB9XG4gICAgLnNvY2hpLWJhbm5lcl9fc29jaWFsIHtcbiAgICAgIHJpZ2h0OiAxNXB4OyB9XG4gIC5zb2NoaS1hYm91dCB7XG4gICAgcGFkZGluZy1yaWdodDogMTAwcHg7IH1cbiAgLnNvY2hpLXdoeV9fY29udGVudC1ibG9ja3Mtb25lLCAuc29jaGktZGlyZWN0aW9uc19fY29sIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTsgfVxuICAuc29jaGktcHJvamVjdHMge1xuICAgIG1hcmdpbi10b3A6IDgwcHg7IH1cbiAgLnNvY2hpLWdlb2dyYXBoeV9fY29udGVudDpiZWZvcmUge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogMTAwJTsgfVxuICAuc29jaGktZ2VvZ3JhcGh5X19jb250ZW50LXRleHQge1xuICAgIHBhZGRpbmc6IDBweDtcbiAgICB3aWR0aDogMTAwJTsgfVxuICAgIC5zb2NoaS1nZW9ncmFwaHlfX2NvbnRlbnQtdGV4dC1ibG9jayB7XG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OyB9XG4gIC5zb2NoaS1mb290ZXJfX2xpbmUtdG9wIHtcbiAgICByaWdodDogMTVweDsgfSB9XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1NzZweCkge1xuICAuc29jaGktYWJvdXQsIC5zb2NoaS1wcm9qZWN0cywgLnNvY2hpLXN0b3JpZXMsIC5zb2NoaS1hY2hpZXZlbWVudHMsIC5zb2NoaS1nZW9ncmFwaHkge1xuICAgIG1hcmdpbi1ib3R0b206IDYwcHg7IH1cbiAgLnNvY2hpLWhlYWRlcl9faW5mbywgLnNvY2hpLWJhbm5lcl9fdGV4dCwgLnNvY2hpLWFib3V0X190aXRsZSwgLnNvY2hpLXdoeV9fdGl0bGUsIC5zb2NoaS1wcm9qZWN0c19fdGl0bGUsIC5zb2NoaS1zdG9yaWVzX190aXRsZSwgLnNvY2hpLWFjaGlldmVtZW50c19fdGl0bGUsIC5zb2NoaS1nZW9ncmFwaHlfX3RpdGxlLCAuc29jaGktZm9vdGVyX190aXRsZSB7XG4gICAgZm9udC1zaXplOiAzOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOHB4O1xuICAgIGhlaWdodDogNzFweDsgfVxuICAuc29jaGktaGVhZGVyIHtcbiAgICBwYWRkaW5nOiAyMHB4IDBweCAwcHg7IH1cbiAgICAuc29jaGktaGVhZGVyX19sb2dvIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7IH1cbiAgICAuc29jaGktaGVhZGVyX19pbmZvIHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGJvdHRvbTogLTFweDtcbiAgICAgIHJpZ2h0OiAwcHg7XG4gICAgICBoZWlnaHQ6IDczcHg7IH1cbiAgLnNvY2hpLWJhbm5lcl9fcGFydHMtb25lIHtcbiAgICBoZWlnaHQ6IDMyMHB4OyB9XG4gICAgLnNvY2hpLWJhbm5lcl9fcGFydHMtb25lLWxpbmUge1xuICAgICAgaGVpZ2h0OiAxNjBweDsgfVxuICAuc29jaGktYmFubmVyX190ZXh0IHtcbiAgICB0b3A6IC03MXB4OyB9XG4gIC5zb2NoaS1iYW5uZXJfX3NvY2lhbCB7XG4gICAgZGlzcGxheTogbm9uZTsgfVxuICAuc29jaGktYmFubmVyX19idG4ge1xuICAgIHdpZHRoOiAzMDBweDtcbiAgICBtYXJnaW4tbGVmdDogLTE1MHB4OyB9XG4gIC5zb2NoaS1saW5rcyB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gICAgLnNvY2hpLWxpbmtzLW9uZSB7XG4gICAgICBtYXJnaW46IDBweCAwcHggMTBweDsgfVxuICAuc29jaGktc3RhdF9fb25lIHtcbiAgICBtYXJnaW46IDBweCAyMHB4IDYwcHg7IH1cbiAgLnNvY2hpLWFib3V0IHtcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBwYWRkaW5nOiAwcHg7IH1cbiAgICAuc29jaGktYWJvdXQ6YmVmb3JlIHtcbiAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICByaWdodDogMHB4O1xuICAgICAgdG9wOiAwcHg7XG4gICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvYmctYWJvdXQucG5nXCIpIDBweCAwcHggbm8tcmVwZWF0O1xuICAgICAgd2lkdGg6IDY0cHg7XG4gICAgICBoZWlnaHQ6IDY0cHg7IH1cbiAgICAuc29jaGktYWJvdXRfX2luZm8ge1xuICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7IH1cbiAgLnNvY2hpLXdoeV9fdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBsaW5lLWhlaWdodDogMjhweDtcbiAgICBoZWlnaHQ6IDUzcHg7XG4gICAgYmFja2dyb3VuZDogbm9uZTsgfVxuICAuc29jaGktd2h5X19jb250ZW50IHtcbiAgICBwYWRkaW5nOiAzMHB4IDE1cHggMXB4OyB9XG4gICAgLnNvY2hpLXdoeV9fY29udGVudC10aXRsZSB7XG4gICAgICBmb250LXNpemU6IDI4cHg7XG4gICAgICBsaW5lLWhlaWdodDogMjhweDtcbiAgICAgIG1hcmdpbi1ib3R0b206IDg1cHg7IH1cbiAgICAuc29jaGktd2h5X19jb250ZW50LWJsb2Nrcy1vbmUge1xuICAgICAgcGFkZGluZzogOTBweCAwcHggMHB4OyB9XG4gIC5zb2NoaS1kaXJlY3Rpb25zIHtcbiAgICBwYWRkaW5nOiAzMHB4IDE1cHggMXB4OyB9XG4gICAgLnNvY2hpLWRpcmVjdGlvbnNfX3RpdGxlIHtcbiAgICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAyOHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogODVweDsgfVxuICAgIC5zb2NoaS1kaXJlY3Rpb25zX19jb2wtaXRlbSB7XG4gICAgICBwYWRkaW5nOiA5MHB4IDBweCA1MHB4OyB9XG4gIC5zb2NoaS1wcm9qZWN0c19fdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBsaW5lLWhlaWdodDogMjhweDtcbiAgICBoZWlnaHQ6IDUzcHg7XG4gICAgYmFja2dyb3VuZDogbm9uZTsgfVxuICAuc29jaGktcHJvamVjdHNfX2xpc3Qtb25lIHtcbiAgICBoZWlnaHQ6IDU2MHB4O1xuICAgIHBhZGRpbmctdG9wOiAzNzBweDsgfVxuICAgIC5zb2NoaS1wcm9qZWN0c19fbGlzdC1vbmU6YmVmb3JlIHtcbiAgICAgIGJvdHRvbTogNzBweDsgfVxuICAgIC5zb2NoaS1wcm9qZWN0c19fbGlzdC1vbmU6YWZ0ZXIge1xuICAgICAgY29udGVudDogXCLQn9C+0LTRgNC+0LHQvdC10LVcIjtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGJvdHRvbTogMjBweDtcbiAgICAgIHJpZ2h0OiAyMHB4O1xuICAgICAgZm9udC1zaXplOiAxNnB4OyB9XG4gIC5zb2NoaS1zdG9yaWVzX190aXRsZSB7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMHB4IDBweDsgfVxuICAuc29jaGktc3Rvcmllc19fbGlzdC1vbmUtY29udGVudCB7XG4gICAgcGFkZGluZzogOHB4IDBweCAwIDI0cHg7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyNnB4OyB9XG4gIC5zb2NoaS1hY2hpZXZlbWVudHNfX3RpdGxlIHtcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4OyB9XG4gIC5zb2NoaS1hY2hpZXZlbWVudHNfX2xpc3Qge1xuICAgIG1hcmdpbjogMHB4OyB9XG4gICAgLnNvY2hpLWFjaGlldmVtZW50c19fbGlzdC1vbmUge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbjogMHB4IDBweCA0MHB4OyB9XG4gIC5zb2NoaS1nZW9ncmFwaHlfX3RpdGxlIHtcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4OyB9XG4gIC5zb2NoaS1nZW9ncmFwaHlfX2NvbnRlbnQ6YmVmb3JlIHtcbiAgICBoZWlnaHQ6IDM1MHB4OyB9XG4gIC5zb2NoaS1mb290ZXJfX3RpdGxlIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDI4cHg7XG4gICAgaGVpZ2h0OiA1M3B4OyB9XG4gIC5zb2NoaS1mb290ZXJfX2xpbmUgc3BhbiB7XG4gICAgZGlzcGxheTogYmxvY2s7IH1cbiAgLnNvY2hpLW1vZGFsX193cmFwIHtcbiAgICB3aWR0aDogOTUlOyB9IH1cbiIsIkBpbXBvcnQgXCJwYXJ0cy9fcmVzZXQuc2Nzc1wiO1xyXG5AaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9wZW4rU2Fuczo0MDAsNjAwLDcwMCZkaXNwbGF5PXN3YXAmc3Vic2V0PWN5cmlsbGljJyk7XHJcbkBpbXBvcnQgXCJwYXJ0cy9fdmFycy5zY3NzXCI7XHJcblxyXG5ib2R5IHtcclxuICAgIGNvbG9yOiAjNDM0NjUwO1xyXG4gICAgZm9udDogMThweC8yOHB4ICRvcztcclxuXHJcbiAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICAgICAgbGVmdDogMHB4O1xyXG4gICAgICAgIHRvcDogMHB4O1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIC43KSB1cmwoXCIuLi9pbWcvbG9hZGVyLnN2Z1wiKSBjZW50ZXIgY2VudGVyIG5vLXJlcGVhdDtcclxuICAgICAgICB6LWluZGV4OiA1MDAwO1xyXG4gICAgfVxyXG5cclxuICAgIC5jb250YWluZXIge1xyXG4gICAgICAgIGZpbHRlcjogYmx1cigzcHgpO1xyXG4gICAgfVxyXG5cclxuICAgICYubG9hZGVkIHtcclxuICAgICAgICAuY29udGFpbmVyIHtcclxuICAgICAgICAgICAgZmlsdGVyOiBub25lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmLm1vZGFsLW9wZW5lZCB7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIH1cclxufVxyXG5cclxuLmNvbnRhaW5lciB7XHJcbiAgICBtYXgtd2lkdGg6IDEyMjRweDtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuXHJcbiRhbmltYXRpb246IDUwMDA7XHJcbiRhbmltYXRpb25QYXVzZTE6ICRhbmltYXRpb24vMjtcclxuJGFuaW1hdGlvblBhdXNlMjogJGFuaW1hdGlvbjtcclxuXHJcbi5zb2NoaSB7XHJcbiAgICAmLWhlYWRlciB7XHJcbiAgICAgICAgcGFkZGluZzogODBweCAwcHg7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuXHJcbiAgICAgICAgLmNvbnRhaW5lciB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2xvZ28ge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICAgICAgd2lkdGg6IDI2MnB4O1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDgwcHg7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9sb2dvLnN2Z1wiKSAwcHggMHB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBhdXRvIDEwMCU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19pbmZvIHtcclxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICByaWdodDogMHB4O1xyXG4gICAgICAgICAgICBib3R0b206IC05MHB4O1xyXG4gICAgICAgICAgICBjb2xvcjogJGM7XHJcbiAgICAgICAgICAgIGZvbnQ6IDkwcHgvMSAkb3M7XHJcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG5cclxuICAgICAgICAgICAgJi1zdHJvbmcge1xyXG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmLWJhbm5lciB7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogODBweDtcclxuXHJcbiAgICAgICAgJl9fcGFydHMge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gICAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICAgICAgbGVmdDogMHB4O1xyXG4gICAgICAgICAgICAgICAgdG9wOiAwcHg7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byB0b3AsIHJnYmEoMCwgMCwgMCwgLjcpIDAlLCB0cmFuc3BhcmVudCAzMCUpO1xyXG4gICAgICAgICAgICAgICAgei1pbmRleDogNDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIiBcIjtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlO1xyXG4gICAgICAgICAgICAgICAgY2xlYXI6IGJvdGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICYtb25lIHtcclxuICAgICAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MDBweDtcclxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMjAlO1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5cclxuICAgICAgICAgICAgICAgICYtaW1nIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJi1saW5lIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDBweDtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDYwJTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLmNvbnRhaW5lciB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgcGFkZGluZy10b3A6IDE1cHg7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9iZy1saW5lcy5wbmdcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX190ZXh0IHtcclxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICBsZWZ0OiAwcHg7XHJcbiAgICAgICAgICAgIHRvcDogLTE3MHB4O1xyXG4gICAgICAgICAgICBmb250OiA5MHB4LzkwcHggJG9zO1xyXG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgei1pbmRleDogNTtcclxuXHJcbiAgICAgICAgICAgICYtc3Ryb25nIHtcclxuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX3NvY2lhbCB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgcmlnaHQ6IDBweDtcclxuICAgICAgICAgICAgdG9wOiAtNDBweDtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAwcHg7XHJcbiAgICAgICAgICAgIHotaW5kZXg6IDU7XHJcblxyXG4gICAgICAgICAgICAmLW9uZSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkYyB1cmwoXCIuLi9pbWcvaWNvbi12ay5zdmdcIikgY2VudGVyIGNlbnRlciBuby1yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNDBweDtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogNDBweDtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogLjNzO1xyXG5cclxuICAgICAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNFQzAwNkQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJi5pbnN0IHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvaWNvbi1pbnN0LnN2Z1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAmLmZiIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvaWNvbi1mYi5zdmdcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJi50dyB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL2ljb24tdHdpdHRlci5zdmdcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYubS1mb290ZXIge1xyXG4gICAgICAgICAgICBtYXJnaW46IDBweDtcclxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJi5tLWZvb3RlciAmX19wYXJ0cy1vbmUge1xyXG4gICAgICAgICAgICAmOmZpcnN0LW9mLXR5cGUge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwJTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJjpudGgtY2hpbGQoMikge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYwJTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fYnRuIHtcclxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICBsZWZ0OiA1MCU7XHJcbiAgICAgICAgICAgIHRvcDogNTAlO1xyXG4gICAgICAgICAgICB3aWR0aDogNDAwcHg7XHJcbiAgICAgICAgICAgIGhlaWdodDogNjBweDtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogJGM7XHJcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIGZvbnQ6IGJvbGQgMjBweC81OHB4ICRvcztcclxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgbWFyZ2luOiAtMzBweCAwcHggMHB4IC0yMDBweDtcclxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgICAgICB6LWluZGV4OiA1O1xyXG5cclxuICAgICAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUMwMDZEO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICYtbGlua3Mge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDkwcHg7XHJcblxyXG4gICAgICAgICZfX29uZSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICAgICAgZm9udDogYm9sZCAyNHB4LzM0cHggJG9zO1xyXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuXHJcbiAgICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAwcHg7XHJcbiAgICAgICAgICAgICAgICBib3R0b206IC0xMnB4O1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDBweDtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogNHB4O1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJGM7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAuM3M7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICY6aG92ZXI6YmVmb3JlIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICYtc3RhdCB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMHB4O1xyXG5cclxuICAgICAgICAmX19vbmUge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxODRweDtcclxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogMTMwcHg7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMHB4IDUwcHggNjBweDtcclxuXHJcbiAgICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAwcHg7XHJcbiAgICAgICAgICAgICAgICB0b3A6IDBweDtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxNzZweDtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTc2cHg7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMzBweCAzMHB4O1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IC0yMHB4IDIwcHggNDBweCByZ2JhKDAsIDAsIDAsIDAuMSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICY6bnRoLWNoaWxkKDEpOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvc3RhdC0wMS5zdmdcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICY6bnRoLWNoaWxkKDIpOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvc3RhdC0wMi5zdmdcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICY6bnRoLWNoaWxkKDMpOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvc3RhdC0wMy5zdmdcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICY6bnRoLWNoaWxkKDQpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDBweDtcclxuXHJcbiAgICAgICAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL3N0YXQtMDQuc3ZnXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGF1dG87XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJjpudGgtY2hpbGQoNSkge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMHB4O1xyXG5cclxuICAgICAgICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvc3RhdC0wNS5zdmdcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICY6bnRoLWNoaWxkKDYpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMjVweDtcclxuXHJcbiAgICAgICAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL3N0YXQtMDYuc3ZnXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmOm50aC1jaGlsZCg3KTpiZWZvcmUge1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL3N0YXQtMDcuc3ZnXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmLWNvbnRlbnQge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICAgICAgZm9udDogNjAwIDE2cHgvMjBweCAkb3M7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogIzQzNDY1MDtcclxuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgei1pbmRleDogMjtcclxuXHJcbiAgICAgICAgICAgICAgICAmLW51bSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRjO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQ6IGJvbGQgNzBweC83OHB4ICRvcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmLWFib3V0IHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvYmctYWJvdXQucG5nXCIpIHJpZ2h0IDBweCByZXBlYXQteTtcclxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzOTRweDtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAxNjBweDtcclxuXHJcbiAgICAgICAgJl9fdGl0bGUge1xyXG4gICAgICAgICAgICBmb250OiA5MHB4LzkwcHggJG9zO1xyXG4gICAgICAgICAgICBjb2xvcjogJGM7XHJcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcblxyXG4gICAgICAgICAgICAmLXN0cm9uZyB7XHJcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9faW5mbyB7XHJcbiAgICAgICAgICAgIGZvbnQ6IDYwMCAzMHB4LzQwcHggJG9zO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fdGV4dCB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDQ1cHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19idG4ge1xyXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAkYztcclxuICAgICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICAgIGZvbnQ6IDYwMCAyMHB4LzYwcHggJG9zO1xyXG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAgICAgYm94LXNoYWRvdzogMHB4IDEwcHggNDBweCByZ2JhKDIzNywgMTIsIDEwOSwgMC4yNSk7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb246IC4zcztcclxuXHJcbiAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogI0VDMDA2RDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmLXdoeSB7XHJcbiAgICAgICAgJl9fdGl0bGUge1xyXG4gICAgICAgICAgICBmb250OiA5MHB4LzkwcHggJG9zO1xyXG4gICAgICAgICAgICBjb2xvcjogJGM7XHJcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9pY29uLXdoeS5wbmdcIikgMHB4IDE2cHggbm8tcmVwZWF0O1xyXG4gICAgICAgICAgICBjb2xvcjogJGM7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDE3MHB4O1xyXG5cclxuICAgICAgICAgICAgJi1zdHJvbmcge1xyXG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2ltZyB7XHJcbiAgICAgICAgICAgIGhlaWdodDogMzQwcHg7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9iZy13aHkuanBnXCIpIGNlbnRlciAwcHggbm8tcmVwZWF0O1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fY29udGVudCB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICRjO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiA0MHB4IDEwMHB4O1xyXG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuXHJcbiAgICAgICAgICAgICYtdGl0bGUge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgZm9udDogYm9sZCAzNnB4LzQ2cHggJG9zO1xyXG4gICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDExNXB4O1xyXG5cclxuICAgICAgICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiA1MCU7XHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAtMzBweDtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogI2ZmZjtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogLTUwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICYtYmxvY2tzIHtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMHB4O1xyXG5cclxuICAgICAgICAgICAgICAgICYtb25lIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogNTAlO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweCAyMHB4IDBweCAxMDBweDtcclxuICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDUwcHg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICYtdGl0bGUge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250OiBib2xkIDI0cHgvMzRweCAkb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDI1cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAmLXRleHQge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE4cHhcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICY6bnRoLWNoaWxkKDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL3doeS1pY29uLTAxLnN2Z1wiKSAwcHggMHB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICY6bnRoLWNoaWxkKDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL3doeS1pY29uLTAyLnN2Z1wiKSAwcHggMHB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICY6bnRoLWNoaWxkKDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL3doeS1pY29uLTAzLnN2Z1wiKSAwcHggMHB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICY6bnRoLWNoaWxkKDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL3doeS1pY29uLTA0LnN2Z1wiKSAwcHggMHB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJi1zbGlkZXIge1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICM0MzQ2NTA7XHJcblxyXG4gICAgICAgICZfX2ltZyB7XHJcbiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJi1kaXJlY3Rpb25zIHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAjNDM0NjUwO1xyXG4gICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgIHBhZGRpbmc6IDYwcHggNTBweCAzMHB4O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMHB4O1xyXG5cclxuICAgICAgICAmX190aXRsZSB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgICBmb250OiBib2xkIDM2cHgvNDZweCAkb3M7XHJcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDExNXB4O1xyXG5cclxuICAgICAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgICAgICAgICAgIGJvdHRvbTogLTMwcHg7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwcHg7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDRweDtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICRjO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC01MHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19jb2wge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XHJcbiAgICAgICAgICAgIHdpZHRoOiA1MCU7XHJcblxyXG4gICAgICAgICAgICAmLWl0ZW0ge1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMHB4IDBweCA1MHB4IDEwMHB4O1xyXG4gICAgICAgICAgICAgICAgZm9udDogNjAwIDE4cHgvMjhweCAkb3M7XHJcblxyXG4gICAgICAgICAgICAgICAgJi10aXRsZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udDogYm9sZCAyNHB4LzM0cHggJG9zO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjVweDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAmLm0ge1xyXG4gICAgICAgICAgICAgICAgICAgICYtMDEge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvZGlyZWN0aW9ucy0wMS5zdmdcIikgMHB4IDBweCBuby1yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAmLTAyIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2RpcmVjdGlvbnMtMDMuc3ZnXCIpIDBweCAwcHggbm8tcmVwZWF0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJi0wMyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9kaXJlY3Rpb25zLTA1LnN2Z1wiKSAwcHggMHB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICYtMDQge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvZGlyZWN0aW9ucy0wMi5zdmdcIikgMHB4IDBweCBuby1yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAmLTA1IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2RpcmVjdGlvbnMtMDQuc3ZnXCIpIDBweCAwcHggbm8tcmVwZWF0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJi0wNiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9kaXJlY3Rpb25zLTA2LnN2Z1wiKSAwcHggMHB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJi1wcm9qZWN0cyB7XHJcbiAgICAgICAgbWFyZ2luOiAxNjBweCAwcHg7XHJcblxyXG4gICAgICAgICZfX3RpdGxlIHtcclxuICAgICAgICAgICAgZm9udDogOTBweC85MHB4ICRvcztcclxuICAgICAgICAgICAgY29sb3I6ICRjO1xyXG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvYmctcHJvamVjdHMuc3ZnXCIpIHJpZ2h0IDE1cHggbm8tcmVwZWF0O1xyXG4gICAgICAgICAgICBjb2xvcjogJGM7XHJcbiAgICAgICAgICAgIGhlaWdodDogMTcwcHg7XHJcblxyXG4gICAgICAgICAgICAmLXN0cm9uZyB7XHJcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fbGlzdCB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMHB4O1xyXG5cclxuICAgICAgICAgICAgJi1vbmUge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogNzAwcHg7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMjUlO1xyXG4gICAgICAgICAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDU2MHB4IDI1cHggMHB4IDBweDtcclxuICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgICAgICAgICAgICAgICBmb250OiA2MDAgMjRweC8yOXB4ICRvcztcclxuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgICAgICAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDI0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAyNHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAmOm50aC1jaGlsZChvZGQpOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJGM7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJjpudGgtY2hpbGQoZXZlbik6YmVmb3JlIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjQzNFNjAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICYucHItMDEge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9wcm9qZWN0cy0wMS5qcGdcIikgY2VudGVyIGNlbnRlciBuby1yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAmLnByLTAyIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvcHJvamVjdHMtMDIuanBnXCIpIGNlbnRlciBjZW50ZXIgbm8tcmVwZWF0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJi5wci0wMyB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL3Byb2plY3RzLTAzLmpwZ1wiKSBjZW50ZXIgY2VudGVyIG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICYucHItMDQge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9wcm9qZWN0cy0wNC5qcGdcIikgY2VudGVyIGNlbnRlciBuby1yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmLXN0b3JpZXMge1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2MHB4O1xyXG5cclxuICAgICAgICAmX190aXRsZSB7XHJcbiAgICAgICAgICAgIGZvbnQ6IDkwcHgvOTBweCAkb3M7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkYztcclxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2JnLXN0b3JpZXMuc3ZnXCIpIDBweCAxNnB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgY29sb3I6ICRjO1xyXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgICAgICAgICAgaGVpZ2h0OiAxNzBweDtcclxuXHJcbiAgICAgICAgICAgICYtc3Ryb25nIHtcclxuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19saXN0IHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAwcHg7XHJcblxyXG4gICAgICAgICAgICAmLW9uZSB7XHJcbiAgICAgICAgICAgICAgICAmLWhlYWRlciB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDMzOHB4IDE1cHggMzBweCA0MHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluLWhlaWdodDogNDMwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJi1uYW1lIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB6LWluZGV4OiAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250OiBib2xkIDI0cHgvMjlweCAkb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAmLXBvc3Qge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IDE2cHgvMTZweCAkb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDM2MGRlZywgcmdiYSgwLCAwLCAwLCAwLjUpIDAlLCByZ2JhKDAsIDAsIDAsIDApIDEwMHB4LCByZ2JhKDAsIDAsIDAsIDApIDEwMCUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB6LWluZGV4OiAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAmLm0tMDEgJi1oZWFkZXIge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zdG9yeS0wMS5qcGdcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJi5tLTAyICYtaGVhZGVyIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvc3RvcnktMDIuanBnXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICYubS0wMyAmLWhlYWRlciB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL3N0b3J5LTAzLmpwZ1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAmLm0tMDQgJi1oZWFkZXIge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9zdG9yeS0wNC5qcGdcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJi5tLTA1ICYtaGVhZGVyIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvc3RvcnktMDUuanBnXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICYtY29udGVudCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogOHB4IDg0cHggMHB4IDI0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udDogMjBweC8yOXB4ICRvcztcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvaWNvbi1xdW90ZS5zdmdcIikgMHB4IDBweCBuby1yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC5zbGljay1hcnJvdyB7XHJcbiAgICAgICAgICAgICAgICB0b3A6IDE4MHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICYtYWNoaWV2ZW1lbnRzIHtcclxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2MHB4O1xyXG5cclxuICAgICAgICAmX190aXRsZSB7XHJcbiAgICAgICAgICAgIGZvbnQ6IDkwcHgvOTBweCAkb3M7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkYztcclxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2JnLWFjaGlldmVtZW50cy5zdmdcIikgMHB4IDE2cHggbm8tcmVwZWF0O1xyXG4gICAgICAgICAgICBjb2xvcjogJGM7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDE3MHB4O1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA2NXB4O1xyXG5cclxuICAgICAgICAgICAgJi1zdHJvbmcge1xyXG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2xpc3Qge1xyXG4gICAgICAgICAgICBtYXJnaW46IDBweCAtMTVweDtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAwcHg7XHJcblxyXG4gICAgICAgICAgICAmLW9uZSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IGNhbGMoMzMuMyUgLSAzMHB4KTtcclxuICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4IDE1cHg7XHJcbiAgICAgICAgICAgICAgICBmb250OiA2MDAgMTZweC8yNnB4ICRvcztcclxuXHJcbiAgICAgICAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDE2MHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IDIwcHggMjBweCA0MHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICY6bnRoLWNoaWxkKDEpOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogI2ZmZiB1cmwoXCIuLi9pbWcvaW1nLWZvcnJlc3Rlci5qcGdcIikgY2VudGVyIGNlbnRlciBuby1yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiA1MCUgYXV0bztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAmOm50aC1jaGlsZCgyKTpiZWZvcmUge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmYgdXJsKFwiLi4vaW1nL2ltZy10ZWNoX2VsaXRlLmpwZ1wiKSBjZW50ZXIgY2VudGVyIG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGF1dG8gNzAlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICY6bnRoLWNoaWxkKDMpOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogI2ZmZiB1cmwoXCIuLi9pbWcvaW1nLUJFU1RPRi5qcGdcIikgY2VudGVyIGNlbnRlciBuby1yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBhdXRvIDYwJTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmLWdlb2dyYXBoeSB7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTYwcHg7XHJcblxyXG4gICAgICAgICZfX3RpdGxlIHtcclxuICAgICAgICAgICAgZm9udDogOTBweC85MHB4ICRvcztcclxuICAgICAgICAgICAgY29sb3I6ICRjO1xyXG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvYmctZ2VvZ3JhcGh5LnN2Z1wiKSByaWdodCAxNnB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgY29sb3I6ICRjO1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDE3MHB4O1xyXG5cclxuICAgICAgICAgICAgJi1zdHJvbmcge1xyXG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX2NvbnRlbnQge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gICAgICAgICAgICAmLXRleHQge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJi10ZXh0IHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAzMiU7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogNzVweDtcclxuICAgICAgICAgICAgICAgIGZvbnQ6IDIwcHgvMjlweCAkb3M7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7XHJcblxyXG4gICAgICAgICAgICAgICAgc3Ryb25nIHtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAmLWJsb2NrIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDBweDtcclxuICAgICAgICAgICAgICAgIHRvcDogMHB4O1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDY1JTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogNjgzcHg7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvbWFwLmpwZ1wiKSAwcHggMHB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSBhdXRvO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICYtZm9vdGVyIHtcclxuICAgICAgICAmX190aXRsZSB7XHJcbiAgICAgICAgICAgIGZvbnQ6IDkwcHgvOTBweCAkb3M7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkYztcclxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgY29sb3I6ICRjO1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDE3MHB4O1xyXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblxyXG4gICAgICAgICAgICAmLXN0cm9uZyB7XHJcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fbGluZSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICM0MzQ2NTA7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDI1cHggMHB4O1xyXG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgICAgZm9udDogNjAwIDE2cHgvMjBweCAkb3M7XHJcblxyXG4gICAgICAgICAgICAuY29udGFpbmVyIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweCA2NXB4IDBweCAxNXB4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmLXRvcCB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICByaWdodDogMHB4O1xyXG4gICAgICAgICAgICAgICAgdG9wOiAtNXB4O1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDQwcHg7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvaWNvbi10b3Auc3ZnXCIpIDBweCAwcHggbm8tcmVwZWF0O1xyXG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICYtbW9kYWwge1xyXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgICAgIGxlZnQ6IDBweDtcclxuICAgICAgICB0b3A6IDBweDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgZm9udC1zaXplOiAwcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZDogIzQzNDY1MDtcclxuICAgICAgICB6LWluZGV4OiAxMDAwO1xyXG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogLjVzO1xyXG5cclxuICAgICAgICAmLnNob3cge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwdmg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX193cmFwIHtcclxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgICAgICAgICB3aWR0aDogNTkycHg7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDIwcHggMHB4O1xyXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG5cclxuICAgICAgICAgICAgJi1ib2R5IHtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG5cclxuICAgICAgICAgICAgICAgICYtaW1nIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJi1wcm9qZWN0IHtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAyNHB4IDI0cHggNjRweDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJi10aXRsZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IGJvbGQgMThweC8yOHB4ICRvcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICYtdGV4dCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IDE2cHgvMjZweCAkb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICYtZm9ybSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAyODBweDtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IGF1dG87XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNDhweCAwcHggNDBweDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJi10aXRsZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IGJvbGQgMjRweC8zNHB4ICRvcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICM0MzQ2NTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9pY29uLW1haWwuc3ZnXCIpIHJpZ2h0IDIwcHggbm8tcmVwZWF0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJi5tLWNoZWNrIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9pY29uLWNoZWNrLnN2Z1wiKSByaWdodCAyMHB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICYtaW5wdXQsXHJcbiAgICAgICAgICAgICAgICAgICAgJi1maWxlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNGNUY1RjU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweCAxNnB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250OiBib2xkIDE0cHggJG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIzQzNDY1MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICY6OnBsYWNlaG9sZGVyIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjOWM5ZGEyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAmLWlucHV0LmVycm9yOjpwbGFjZWhvbGRlciB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkYztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICYtZmlsZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMjBweCAwcHggMHB4IDE2cHg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAmLWlucHV0IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDIwMHB4IDBweCAwcHggMTAwMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgei1pbmRleDogMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJi10ZXh0IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjOWM5ZGEyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAyMTBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICYtaWNvbiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDYwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvaWNvbi10cmFzaC5zdmdcIikgY2VudGVyIGNlbnRlciBuby1yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6LWluZGV4OiAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAmLmF0dGFjaCAmLXRleHQge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICM0MzQ2NTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICYuYXR0YWNoICYtaWNvbiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJi1zZW5kLFxyXG4gICAgICAgICAgICAgICAgICAgICYtY2xvc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICRjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250OiBib2xkIDE0cHgvNjBweCAkb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IDBweCAxMHB4IDQwcHggcmdiYSgyMzcsIDEyLCAxMDksIDAuMjUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IC4zcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0VDMDA2RDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJi10ZXh0IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogOTBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJi1jbG9zZSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAyNHB4O1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDU2cHg7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU2cHg7XHJcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmIHVybChcIi4uL2ltZy9pY29uLWNsb3NlLnN2Z1wiKSBjZW50ZXIgY2VudGVyIG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLnNsaWNrIHtcclxuICAgICYtYXJyb3cge1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB3aWR0aDogNDBweDtcclxuICAgICAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjUpO1xyXG4gICAgICAgIHRvcDogNTAlO1xyXG4gICAgICAgIG1hcmdpbi10b3A6IC0yMHB4O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMHB4O1xyXG4gICAgICAgIGJvcmRlcjogMHB4O1xyXG4gICAgICAgIHBhZGRpbmc6IDBweDtcclxuICAgICAgICB6LWluZGV4OiAxMDtcclxuICAgICAgICB0cmFuc2l0aW9uOiAuM3M7XHJcblxyXG4gICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgIHdpZHRoOiA0MHB4O1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybChcIi4uL2ltZy9hcnJvdy1sZWZ0LnN2Z1wiKSBjZW50ZXIgY2VudGVyIG5vLXJlcGVhdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuOCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICYtcHJldiB7XHJcbiAgICAgICAgbGVmdDogMHB4O1xyXG4gICAgfVxyXG5cclxuICAgICYtbmV4dCB7XHJcbiAgICAgICAgcmlnaHQ6IDBweDtcclxuXHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuQG1lZGlhIChtYXgtd2lkdGg6IDEzNjZweCkge1xyXG4gICAgLnNvY2hpIHtcclxuICAgICAgICAmLWJhbm5lciB7XHJcbiAgICAgICAgICAgICZfX3BhcnRzLW9uZSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMjMlO1xyXG5cclxuICAgICAgICAgICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDU0JTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJi5tLWZvb3RlciAmX19wYXJ0cy1vbmUge1xyXG4gICAgICAgICAgICAgICAgJjpudGgtY2hpbGQoMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMyU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJjpudGgtY2hpbGQoMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA1NCU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkBtZWRpYSAobWF4LXdpZHRoOiAxMjMwcHgpIHtcclxuICAgIC5jb250YWluZXIge1xyXG4gICAgICAgIG1heC13aWR0aDogOTM0cHg7XHJcbiAgICB9XHJcblxyXG4gICAgLnNvY2hpIHtcclxuICAgICAgICAmLWxpbmtzIHtcclxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcblxyXG4gICAgICAgICAgICAmX19vbmUge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwcHggMjBweCAxMHB4IDBweDtcclxuXHJcbiAgICAgICAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJi1nZW9ncmFwaHlfX2NvbnRlbnQge1xyXG4gICAgICAgICAgICAmLXRleHQge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDM1JTtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMSU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICYtbWFwIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA2NCU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkBtZWRpYSAobWF4LXdpZHRoOiAkc2NyZWVuLXNtKSB7XHJcbiAgICAuY29udGFpbmVyIHtcclxuICAgICAgICBwYWRkaW5nOiAwcHggMTVweDtcclxuICAgIH1cclxuXHJcbiAgICAuc29jaGkge1xyXG5cclxuICAgICAgICAmLWJhbm5lcl9fdGV4dCxcclxuICAgICAgICAmLWFib3V0X190aXRsZSxcclxuICAgICAgICAmLXdoeV9fdGl0bGUsXHJcbiAgICAgICAgJi1wcm9qZWN0c19fdGl0bGUsXHJcbiAgICAgICAgJi1zdG9yaWVzX190aXRsZSxcclxuICAgICAgICAmLWFjaGlldmVtZW50c19fdGl0bGUsXHJcbiAgICAgICAgJi1nZW9ncmFwaHlfX3RpdGxlLFxyXG4gICAgICAgICYtZm9vdGVyX190aXRsZSB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogNTBweDtcclxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDUwcHg7XHJcbiAgICAgICAgICAgIGhlaWdodDogOTVweDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYtYWJvdXQsXHJcbiAgICAgICAgJi1wcm9qZWN0cyxcclxuICAgICAgICAmLXN0b3JpZXMsXHJcbiAgICAgICAgJi1hY2hpZXZlbWVudHMsXHJcbiAgICAgICAgJi1nZW9ncmFwaHkge1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA4MHB4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJi1oZWFkZXIge1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAyMHB4IDBweDtcclxuXHJcbiAgICAgICAgICAgICZfX2luZm8ge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiA1MHB4O1xyXG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDUwcHg7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGF1dG87XHJcbiAgICAgICAgICAgICAgICBib3R0b206IC0xMHB4O1xyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDE1cHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYtYmFubmVyIHtcclxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuXHJcbiAgICAgICAgICAgICZfX3BhcnRzLW9uZSB7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDQwMHB4O1xyXG5cclxuICAgICAgICAgICAgICAgICYtbGluZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDBweDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAmOm50aC1jaGlsZCgyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAmOm50aC1jaGlsZCgzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDQ2JTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJi5tLWZvb3RlciAmX19wYXJ0cy1vbmU6bnRoLWNoaWxkKDEpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA1NCU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICAgICAgbGVmdDogMTVweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJl9fc29jaWFsIHtcclxuICAgICAgICAgICAgICAgIHJpZ2h0OiAxNXB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWFib3V0IHtcclxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTAwcHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLXdoeV9fY29udGVudC1ibG9ja3Mtb25lLFxyXG4gICAgICAgICYtZGlyZWN0aW9uc19fY29sIHtcclxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJi1wcm9qZWN0cyB7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWdlb2dyYXBoeV9fY29udGVudCB7XHJcbiAgICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICYtdGV4dCB7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuXHJcbiAgICAgICAgICAgICAgICAmLWJsb2NrIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWZvb3Rlcl9fbGluZS10b3Age1xyXG4gICAgICAgICAgICByaWdodDogMTVweDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkBtZWRpYSAobWF4LXdpZHRoOiAkc2NyZWVuLXhzKSB7XHJcbiAgICAuc29jaGkge1xyXG5cclxuICAgICAgICAmLWFib3V0LFxyXG4gICAgICAgICYtcHJvamVjdHMsXHJcbiAgICAgICAgJi1zdG9yaWVzLFxyXG4gICAgICAgICYtYWNoaWV2ZW1lbnRzLFxyXG4gICAgICAgICYtZ2VvZ3JhcGh5IHtcclxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNjBweDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYtaGVhZGVyX19pbmZvLFxyXG4gICAgICAgICYtYmFubmVyX190ZXh0LFxyXG4gICAgICAgICYtYWJvdXRfX3RpdGxlLFxyXG4gICAgICAgICYtd2h5X190aXRsZSxcclxuICAgICAgICAmLXByb2plY3RzX190aXRsZSxcclxuICAgICAgICAmLXN0b3JpZXNfX3RpdGxlLFxyXG4gICAgICAgICYtYWNoaWV2ZW1lbnRzX190aXRsZSxcclxuICAgICAgICAmLWdlb2dyYXBoeV9fdGl0bGUsXHJcbiAgICAgICAgJi1mb290ZXJfX3RpdGxlIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAzOHB4O1xyXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMzhweDtcclxuICAgICAgICAgICAgaGVpZ2h0OiA3MXB4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJi1oZWFkZXIge1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAyMHB4IDBweCAwcHg7XHJcblxyXG4gICAgICAgICAgICAmX19sb2dvIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICZfX2luZm8ge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICAgICAgYm90dG9tOiAtMXB4O1xyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDBweDtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogNzNweDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJi1iYW5uZXIge1xyXG4gICAgICAgICAgICAmX19wYXJ0cy1vbmUge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMjBweDtcclxuXHJcbiAgICAgICAgICAgICAgICAmLWxpbmUge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTYwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICZfX3RleHQge1xyXG4gICAgICAgICAgICAgICAgdG9wOiAtNzFweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJl9fc29jaWFsIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICZfX2J0biB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMzAwcHg7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogLTE1MHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWxpbmtzIHtcclxuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAgICAgICAgICAgJi1vbmUge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwcHggMHB4IDEwcHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYtc3RhdF9fb25le1xyXG4gICAgICAgICAgICBtYXJnaW46IDBweCAyMHB4IDYwcHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWFib3V0IHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcclxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAwcHg7XHJcblxyXG4gICAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDBweDtcclxuICAgICAgICAgICAgICAgIHRvcDogMHB4O1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2JnLWFib3V0LnBuZ1wiKSAwcHggMHB4IG5vLXJlcGVhdDtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA2NHB4O1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2NHB4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmX19pbmZvIHtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLXdoeSB7XHJcbiAgICAgICAgICAgICZfX3RpdGxlIHtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjhweDtcclxuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyOHB4O1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1M3B4O1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJl9fY29udGVudCB7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAzMHB4IDE1cHggMXB4O1xyXG5cclxuICAgICAgICAgICAgICAgICYtdGl0bGUge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjhweDtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA4NXB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICYtYmxvY2tzLW9uZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogOTBweCAwcHggMHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWRpcmVjdGlvbnMge1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAzMHB4IDE1cHggMXB4O1xyXG5cclxuICAgICAgICAgICAgJl9fdGl0bGUge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAyOHB4O1xyXG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI4cHg7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA4NXB4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmX19jb2wtaXRlbSB7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA5MHB4IDBweCA1MHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLXByb2plY3RzIHtcclxuICAgICAgICAgICAgJl9fdGl0bGUge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAyOHB4O1xyXG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI4cHg7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDUzcHg7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmX19saXN0LW9uZSB7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU2MHB4O1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDM3MHB4O1xyXG5cclxuICAgICAgICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgICAgICAgICBib3R0b206IDcwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJjphZnRlciB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCLQn9C+0LTRgNC+0LHQvdC10LVcIjtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAyMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJi1zdG9yaWVzIHtcclxuICAgICAgICAgICAgJl9fdGl0bGUge1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMHB4IDBweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJl9fbGlzdC1vbmUtY29udGVudCB7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA4cHggMHB4IDAgMjRweDtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNnB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWFjaGlldmVtZW50cyB7XHJcbiAgICAgICAgICAgICZfX3RpdGxlIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICZfX2xpc3Qge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7XHJcblxyXG4gICAgICAgICAgICAgICAgJi1vbmUge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4IDBweCA0MHB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWdlb2dyYXBoeSB7XHJcbiAgICAgICAgICAgICZfX3RpdGxlIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICZfX2NvbnRlbnQge1xyXG4gICAgICAgICAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMzUwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYtZm9vdGVyIHtcclxuICAgICAgICAgICAgJl9fdGl0bGUge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAyOHB4O1xyXG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI4cHg7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDUzcHg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICZfX2xpbmUgc3BhbiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJi1tb2RhbCB7XHJcbiAgICAgICAgICAgICZfX3dyYXAge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDk1JTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQvXG4gICB2Mi4wLW1vZGlmaWVkIHwgMjAxMTAxMjZcbiAgIExpY2Vuc2U6IG5vbmUgKHB1YmxpYyBkb21haW4pXG4qL1xuXG5odG1sLFxuYm9keSxcbmRpdixcbnNwYW4sXG5hcHBsZXQsXG5vYmplY3QsXG5pZnJhbWUsXG5oMSxcbmgyLFxuaDMsXG5oNCxcbmg1LFxuaDYsXG5wLFxuYmxvY2txdW90ZSxcbnByZSxcbmEsXG5hYmJyLFxuYWNyb255bSxcbmFkZHJlc3MsXG5iaWcsXG5jaXRlLFxuY29kZSxcbmRlbCxcbmRmbixcbmVtLFxuaW1nLFxuaW5zLFxua2JkLFxucSxcbnMsXG5zYW1wLFxuc21hbGwsXG5zdHJpa2UsXG5zdHJvbmcsXG5zdWIsXG5zdXAsXG50dCxcbnZhcixcbmIsXG51LFxuaSxcbmNlbnRlcixcbmRsLFxuZHQsXG5kZCxcbm9sLFxudWwsXG5saSxcbmZpZWxkc2V0LFxuZm9ybSxcbmxhYmVsLFxubGVnZW5kLFxudGFibGUsXG5jYXB0aW9uLFxudGJvZHksXG50Zm9vdCxcbnRoZWFkLFxudHIsXG50aCxcbnRkLFxuYXJ0aWNsZSxcbmFzaWRlLFxuY2FudmFzLFxuZGV0YWlscyxcbmVtYmVkLFxuZmlndXJlLFxuZmlnY2FwdGlvbixcbmZvb3RlcixcbmhlYWRlcixcbmhncm91cCxcbm1lbnUsXG5uYXYsXG5vdXRwdXQsXG5ydWJ5LFxuc2VjdGlvbixcbnN1bW1hcnksXG50aW1lLFxubWFyayxcbmF1ZGlvLFxudmlkZW8ge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGJvcmRlcjogMDtcbiAgICBmb250LXNpemU6IDEwMCU7XG4gICAgZm9udDogaW5oZXJpdDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbi8qIG1ha2Ugc3VyZSB0byBzZXQgc29tZSBmb2N1cyBzdHlsZXMgZm9yIGFjY2Vzc2liaWxpdHkgKi9cbjpmb2N1cyB7XG4gICAgb3V0bGluZTogMDtcbn1cblxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tZW51LFxubmF2LFxuc2VjdGlvbiB7XG4gICAgZGlzcGxheTogYmxvY2s7XG59XG5cbmJvZHkge1xuICAgIGxpbmUtaGVpZ2h0OiAxO1xufVxuXG5vbCxcbnVsIHtcbiAgICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG5ibG9ja3F1b3RlLFxucSB7XG4gICAgcXVvdGVzOiBub25lO1xufVxuXG5ibG9ja3F1b3RlOmJlZm9yZSxcbmJsb2NrcXVvdGU6YWZ0ZXIsXG5xOmJlZm9yZSxcbnE6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGNvbnRlbnQ6IG5vbmU7XG59XG5cbnRhYmxlIHtcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG5pbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG5pbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24sXG5pbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLXJlc3VsdHMtYnV0dG9uLFxuaW5wdXRbdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1yZXN1bHRzLWRlY29yYXRpb24ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XG59XG5cbmlucHV0W3R5cGU9c2VhcmNoXSB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbiAgICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG59XG5cbnRleHRhcmVhIHtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgIHJlc2l6ZTogdmVydGljYWw7XG59XG5cbi8qKlxuICogQ29ycmVjdCBgaW5saW5lLWJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDYvNy84LzkgYW5kIEZpcmVmb3ggMy5cbiAqL1xuXG5hdWRpbyxcbmNhbnZhcyxcbnZpZGVvIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgKmRpc3BsYXk6IGlubGluZTtcbiAgICAqem9vbTogMTtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG59XG5cbi8qKlxuICogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cbiAqIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXG4gKi9cblxuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIGhlaWdodDogMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgNy84LzksIEZpcmVmb3ggMywgYW5kIFNhZmFyaSA0LlxuICogS25vd24gaXNzdWU6IG5vIElFIDYgc3VwcG9ydC5cbiAqL1xuXG5baGlkZGVuXSB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRleHQgcmVzaXppbmcgb2RkbHkgaW4gSUUgNi83IHdoZW4gYm9keSBgZm9udC1zaXplYCBpcyBzZXQgdXNpbmdcbiAqICAgIGBlbWAgdW5pdHMuXG4gKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcbiAqICAgIHVzZXIgem9vbS5cbiAqL1xuXG5odG1sIHtcbiAgICBmb250LXNpemU6IDEwMCU7XG4gICAgLyogMSAqL1xuICAgIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgICAvKiAyICovXG4gICAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gICAgLyogMiAqL1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYG91dGxpbmVgIGluY29uc2lzdGVuY3kgYmV0d2VlbiBDaHJvbWUgYW5kIG90aGVyIGJyb3dzZXJzLlxuICovXG5cbmE6Zm9jdXMge1xuICAgIG91dGxpbmU6IHRoaW4gZG90dGVkO1xufVxuXG4vKipcbiAqIEltcHJvdmUgcmVhZGFiaWxpdHkgd2hlbiBmb2N1c2VkIGFuZCBhbHNvIG1vdXNlIGhvdmVyZWQgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG4gICAgb3V0bGluZTogMDtcbn1cblxuLyoqXG4gKiAxLiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDYvNy84LzkgYW5kIEZpcmVmb3ggMy5cbiAqIDIuIEltcHJvdmUgaW1hZ2UgcXVhbGl0eSB3aGVuIHNjYWxlZCBpbiBJRSA3LlxuICovXG5cbmltZyB7XG4gICAgYm9yZGVyOiAwO1xuICAgIC8qIDEgKi9cbiAgICAtbXMtaW50ZXJwb2xhdGlvbi1tb2RlOiBiaWN1YmljO1xuICAgIC8qIDIgKi9cbn1cblxuLyoqXG4gKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA2LzcvOC85LCBTYWZhcmkgNSwgYW5kIE9wZXJhIDExLlxuICovXG5cbmZpZ3VyZSB7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4vKipcbiAqIENvcnJlY3QgbWFyZ2luIGRpc3BsYXllZCBvZGRseSBpbiBJRSA2LzcuXG4gKi9cblxuZm9ybSB7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4vKipcbiAqIERlZmluZSBjb25zaXN0ZW50IGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZy5cbiAqL1xuXG5maWVsZHNldCB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2MwYzBjMDtcbiAgICBtYXJnaW46IDAgMnB4O1xuICAgIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGNvbG9yIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgNi83LzgvOS5cbiAqIDIuIENvcnJlY3QgdGV4dCBub3Qgd3JhcHBpbmcgaW4gRmlyZWZveCAzLlxuICogMy4gQ29ycmVjdCBhbGlnbm1lbnQgZGlzcGxheWVkIG9kZGx5IGluIElFIDYvNy5cbiAqL1xuXG5sZWdlbmQge1xuICAgIGJvcmRlcjogMDtcbiAgICAvKiAxICovXG4gICAgcGFkZGluZzogMDtcbiAgICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICAgIC8qIDIgKi9cbiAgICAqbWFyZ2luLWxlZnQ6IC03cHg7XG4gICAgLyogMyAqL1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgZm9udCBzaXplIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gQWRkcmVzcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBJRSA2LzcsIEZpcmVmb3ggMyssIFNhZmFyaSA1LFxuICogICAgYW5kIENocm9tZS5cbiAqIDMuIEltcHJvdmUgYXBwZWFyYW5jZSBhbmQgY29uc2lzdGVuY3kgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmJ1dHRvbixcbmlucHV0LFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICAgIGZvbnQtc2l6ZTogMTAwJTtcbiAgICAvKiAxICovXG4gICAgbWFyZ2luOiAwO1xuICAgIC8qIDIgKi9cbiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gICAgLyogMyAqL1xuICAgICp2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgIC8qIDMgKi9cbn1cblxuLyoqXG4gKiBBZGRyZXNzIEZpcmVmb3ggMysgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4gKiB0aGUgVUEgc3R5bGVzaGVldC5cbiAqL1xuXG5idXR0b24sXG5pbnB1dCB7XG4gICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXG4gKiBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxuICogQ29ycmVjdCBgYnV0dG9uYCBzdHlsZSBpbmhlcml0YW5jZSBpbiBDaHJvbWUsIFNhZmFyaSA1KywgYW5kIElFIDYrLlxuICogQ29ycmVjdCBgc2VsZWN0YCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94IDQrIGFuZCBPcGVyYS5cbiAqL1xuXG5idXR0b24sXG5zZWxlY3Qge1xuICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xufVxuXG4vKipcbiAqIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gXG4gKiAgICBhbmQgYHZpZGVvYCBjb250cm9scy5cbiAqIDIuIENvcnJlY3QgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSBgaW5wdXRgIHR5cGVzIGluIGlPUy5cbiAqIDMuIEltcHJvdmUgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlXG4gKiAgICBgaW5wdXRgIGFuZCBvdGhlcnMuXG4gKiA0LiBSZW1vdmUgaW5uZXIgc3BhY2luZyBpbiBJRSA3IHdpdGhvdXQgYWZmZWN0aW5nIG5vcm1hbCB0ZXh0IGlucHV0cy5cbiAqICAgIEtub3duIGlzc3VlOiBpbm5lciBzcGFjaW5nIHJlbWFpbnMgaW4gSUUgNi5cbiAqL1xuXG5idXR0b24sXG5odG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sXG4vKiAxICovXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgICAvKiAyICovXG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIC8qIDMgKi9cbiAgICAqb3ZlcmZsb3c6IHZpc2libGU7XG4gICAgLyogNCAqL1xufVxuXG4vKipcbiAqIFJlLXNldCBkZWZhdWx0IGN1cnNvciBmb3IgZGlzYWJsZWQgZWxlbWVudHMuXG4gKi9cblxuYnV0dG9uW2Rpc2FibGVkXSxcbmh0bWwgaW5wdXRbZGlzYWJsZWRdIHtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbi8qKlxuICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBjb250ZW50LWJveCBpbiBJRSA4LzkuXG4gKiAyLiBSZW1vdmUgZXhjZXNzIHBhZGRpbmcgaW4gSUUgOC85LlxuICogMy4gUmVtb3ZlIGV4Y2VzcyBwYWRkaW5nIGluIElFIDcuXG4gKiAgICBLbm93biBpc3N1ZTogZXhjZXNzIHBhZGRpbmcgcmVtYWlucyBpbiBJRSA2LlxuICovXG5cbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXSxcbmlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAvKiAxICovXG4gICAgcGFkZGluZzogMDtcbiAgICAvKiAyICovXG4gICAgKmhlaWdodDogMTNweDtcbiAgICAvKiAzICovXG4gICAgKndpZHRoOiAxM3B4O1xuICAgIC8qIDMgKi9cbn1cblxuLyoqXG4gKiAxLiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lLlxuICogMi4gQWRkcmVzcyBgYm94LXNpemluZ2Agc2V0IHRvIGBib3JkZXItYm94YCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lXG4gKiAgICAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcbiAgICAvKiAxICovXG4gICAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgIC8qIDIgKi9cbiAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIDUgYW5kIENocm9tZVxuICogb24gT1MgWC5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCAzKy5cbiAqL1xuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gICAgYm9yZGVyOiAwO1xuICAgIHBhZGRpbmc6IDA7XG59XG5cbi8qKlxuICogMS4gUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDYvNy84LzkuXG4gKiAyLiBJbXByb3ZlIHJlYWRhYmlsaXR5IGFuZCBhbGlnbm1lbnQgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnRleHRhcmVhIHtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgICAvKiAxICovXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgICAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLlxuICovXG5cbnRhYmxlIHtcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG5odG1sLFxuYnV0dG9uLFxuaW5wdXQsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gICAgY29sb3I6ICMyMjI7XG59XG5cblxuOjotbW96LXNlbGVjdGlvbiB7XG4gICAgYmFja2dyb3VuZDogI2IzZDRmYztcbiAgICB0ZXh0LXNoYWRvdzogbm9uZTtcbn1cblxuOjpzZWxlY3Rpb24ge1xuICAgIGJhY2tncm91bmQ6ICNiM2Q0ZmM7XG4gICAgdGV4dC1zaGFkb3c6IG5vbmU7XG59XG5cbmltZyB7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cblxuZmllbGRzZXQge1xuICAgIGJvcmRlcjogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbn1cblxudGV4dGFyZWEge1xuICAgIHJlc2l6ZTogdmVydGljYWw7XG59XG5cbi5jaHJvbWVmcmFtZSB7XG4gICAgbWFyZ2luOiAwLjJlbSAwO1xuICAgIGJhY2tncm91bmQ6ICNjY2M7XG4gICAgY29sb3I6ICMwMDA7XG4gICAgcGFkZGluZzogMC4yZW0gMDtcbn1cblxuaW5wdXRbdHlwZT10ZXh0XTo6LW1zLWNsZWFyIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHdpZHRoOiAwO1xuICAgIGhlaWdodDogMDtcbn1cblxuaW5wdXRbdHlwZT10ZXh0XTo6LW1zLXJldmVhbCB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICB3aWR0aDogMDtcbiAgICBoZWlnaHQ6IDA7XG59XG5cbmlucHV0Ojotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uLFxuaW5wdXQ6Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG5pbnB1dDo6LXdlYmtpdC1zZWFyY2gtcmVzdWx0cy1idXR0b24sXG5pbnB1dDo6LXdlYmtpdC1zZWFyY2gtcmVzdWx0cy1kZWNvcmF0aW9uIHtcbiAgICBkaXNwbGF5OiBub25lO1xufSIsIi8vPT0gTWVkaWEgcXVlcmllcyBicmVha3BvaW50c1xyXG4vL1xyXG4vLyMjIERlZmluZSB0aGUgYnJlYWtwb2ludHMgYXQgd2hpY2ggeW91ciBsYXlvdXQgd2lsbCBjaGFuZ2UsIGFkYXB0aW5nIHRvIGRpZmZlcmVudCBzY3JlZW4gc2l6ZXMuXHJcblxyXG4vLyBFeHRyYSBzbWFsbCBzY3JlZW4gLyBwaG9uZVxyXG4vLyoqIERlcHJlY2F0ZWQgYCRzY3JlZW4teHNgIGFzIG9mIHYzLjAuMVxyXG4kc2NyZWVuLXhzOiA1NzZweDtcclxuLy8qKiBEZXByZWNhdGVkIGAkc2NyZWVuLXhzLW1pbmAgYXMgb2YgdjMuMi4wXHJcbiRzY3JlZW4teHMtbWluOiAkc2NyZWVuLXhzO1xyXG4vLyoqIERlcHJlY2F0ZWQgYCRzY3JlZW4tcGhvbmVgIGFzIG9mIHYzLjAuMVxyXG4kc2NyZWVuLXBob25lOiAkc2NyZWVuLXhzLW1pbjtcclxuXHJcbi8vIFNtYWxsIHNjcmVlbiAvIHRhYmxldFxyXG4vLyoqIERlcHJlY2F0ZWQgYCRzY3JlZW4tc21gIGFzIG9mIHYzLjAuMVxyXG4kc2NyZWVuLXNtOiA3NjhweDtcclxuJHNjcmVlbi1zbS1taW46ICRzY3JlZW4tc207XHJcbi8vKiogRGVwcmVjYXRlZCBgJHNjcmVlbi10YWJsZXRgIGFzIG9mIHYzLjAuMVxyXG4kc2NyZWVuLXRhYmxldDogJHNjcmVlbi1zbS1taW47XHJcblxyXG4vLyBNZWRpdW0gc2NyZWVuIC8gZGVza3RvcFxyXG4vLyoqIERlcHJlY2F0ZWQgYCRzY3JlZW4tbWRgIGFzIG9mIHYzLjAuMVxyXG4kc2NyZWVuLW1kOiAxMDI0cHg7XHJcbiRzY3JlZW4tbWQtbWluOiAkc2NyZWVuLW1kO1xyXG4vLyoqIERlcHJlY2F0ZWQgYCRzY3JlZW4tZGVza3RvcGAgYXMgb2YgdjMuMC4xXHJcbiRzY3JlZW4tZGVza3RvcDogJHNjcmVlbi1tZC1taW47XHJcblxyXG4vLyBMYXJnZSBzY3JlZW4gLyB3aWRlIGRlc2t0b3BcclxuLy8qKiBEZXByZWNhdGVkIGAkc2NyZWVuLWxnYCBhcyBvZiB2My4wLjFcclxuJHNjcmVlbi1sZzogMTIwMHB4O1xyXG4kc2NyZWVuLWxnLW1pbjogJHNjcmVlbi1sZztcclxuLy8qKiBEZXByZWNhdGVkIGAkc2NyZWVuLWxnLWRlc2t0b3BgIGFzIG9mIHYzLjAuMVxyXG4kc2NyZWVuLWxnLWRlc2t0b3A6ICRzY3JlZW4tbGctbWluO1xyXG5cclxuLy8gU28gbWVkaWEgcXVlcmllcyBkb24ndCBvdmVybGFwIHdoZW4gcmVxdWlyZWQsIHByb3ZpZGUgYSBtYXhpbXVtXHJcbiRzY3JlZW4teHMtbWF4OiAoJHNjcmVlbi1zbS1taW4gLSAxKTtcclxuJHNjcmVlbi1zbS1tYXg6ICgkc2NyZWVuLW1kLW1pbiAtIDEpO1xyXG4kc2NyZWVuLW1kLW1heDogKCRzY3JlZW4tbGctbWluIC0gMSk7XHJcblxyXG4kb3M6IFwiT3BlbiBTYW5zXCI7XHJcbiRvc0w6IFwiT3BlbiBTYW5zIExpZ2h0XCI7XHJcbiRvc1NCOiBcIk9wZW4gU2FucyBTZW1pIEJvbGRcIjtcclxuJG9zQjogXCJPcGVuIFNhbnMgQm9sZFwiO1xyXG4kYzogI0Q4MUM2MzsiXX0= */
