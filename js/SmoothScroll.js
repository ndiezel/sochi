!function(){var s,i,c,a,o={frameRate:150,animationTime:400,stepSize:100,pulseAlgorithm:!0,pulseScale:4,pulseNormalize:1,accelerationDelta:50,accelerationMax:3,keyboardSupport:!0,arrowScroll:50,fixedBackground:!0,excluded:""},p=o,u=!1,d=!1,l={x:0,y:0},f=!1,m=document.documentElement,h=[],w=/^Mac/.test(navigator.platform),v={left:37,up:38,right:39,down:40,spacebar:32,pageup:33,pagedown:34,end:35,home:36},y={37:1,38:1,39:1,40:1};function b(){if(!f&&document.body){f=!0;var e=document.body,t=document.documentElement,o=window.innerHeight,n=e.scrollHeight;if(m=0<=document.compatMode.indexOf("CSS")?t:e,s=e,p.keyboardSupport&&Y("keydown",D),top!=self)d=!0;else if(Q&&o<n&&(e.offsetHeight<=o||t.offsetHeight<=o)){var r,a=document.createElement("div");a.style.cssText="position:absolute; z-index:-10000; top:0; left:0; right:0; height:"+m.scrollHeight+"px",document.body.appendChild(a),c=function(){r||(r=setTimeout(function(){u||(a.style.height="0",a.style.height=m.scrollHeight+"px",r=null)},500))},setTimeout(c,10),Y("resize",c);if((i=new R(c)).observe(e,{attributes:!0,childList:!0,characterData:!1}),m.offsetHeight<=o){var l=document.createElement("div");l.style.clear="both",e.appendChild(l)}}p.fixedBackground||u||(e.style.backgroundAttachment="scroll",t.style.backgroundAttachment="scroll")}}var g=[],S=!1,x=Date.now();function k(d,f,m){var e,t;if(e=0<(e=f)?1:-1,t=0<(t=m)?1:-1,(l.x!==e||l.y!==t)&&(l.x=e,l.y=t,g=[],x=0),1!=p.accelerationMax){var o=Date.now()-x;if(o<p.accelerationDelta){var n=(1+50/o)/2;1<n&&(n=Math.min(n,p.accelerationMax),f*=n,m*=n)}x=Date.now()}if(g.push({x:f,y:m,lastX:f<0?.99:-.99,lastY:m<0?.99:-.99,start:Date.now()}),!S){var r=q(),h=d===r||d===document.body;null==d.$scrollBehavior&&function(e){var t=M(e);if(null==B[t]){var o=getComputedStyle(e,"")["scroll-behavior"];B[t]="smooth"==o}return B[t]}(d)&&(d.$scrollBehavior=d.style.scrollBehavior,d.style.scrollBehavior="auto");var w=function(e){for(var t=Date.now(),o=0,n=0,r=0;r<g.length;r++){var a=g[r],l=t-a.start,i=l>=p.animationTime,c=i?1:l/p.animationTime;p.pulseAlgorithm&&(c=F(c));var s=a.x*c-a.lastX>>0,u=a.y*c-a.lastY>>0;o+=s,n+=u,a.lastX+=s,a.lastY+=u,i&&(g.splice(r,1),r--)}h?window.scrollBy(o,n):(o&&(d.scrollLeft+=o),n&&(d.scrollTop+=n)),f||m||(g=[]),g.length?j(w,d,1e3/p.frameRate+1):(S=!1,null!=d.$scrollBehavior&&(d.style.scrollBehavior=d.$scrollBehavior,d.$scrollBehavior=null))};j(w,d,0),S=!0}}function e(e){f||b();var t=e.target;if(e.defaultPrevented||e.ctrlKey)return!0;if(N(s,"embed")||N(t,"embed")&&/\.pdf/i.test(t.src)||N(s,"object")||t.shadowRoot)return!0;var o=-e.wheelDeltaX||e.deltaX||0,n=-e.wheelDeltaY||e.deltaY||0;w&&(e.wheelDeltaX&&K(e.wheelDeltaX,120)&&(o=e.wheelDeltaX/Math.abs(e.wheelDeltaX)*-120),e.wheelDeltaY&&K(e.wheelDeltaY,120)&&(n=e.wheelDeltaY/Math.abs(e.wheelDeltaY)*-120)),o||n||(n=-e.wheelDelta||0),1===e.deltaMode&&(o*=40,n*=40);var r=z(t);return r?!!function(e){if(!e)return;h.length||(h=[e,e,e]);e=Math.abs(e),h.push(e),h.shift(),clearTimeout(a),a=setTimeout(function(){try{localStorage.SS_deltaBuffer=h.join(",")}catch(e){}},1e3);var t=120<e&&P(e);return!P(120)&&!P(100)&&!t}(n)||(1.2<Math.abs(o)&&(o*=p.stepSize/120),1.2<Math.abs(n)&&(n*=p.stepSize/120),k(r,o,n),e.preventDefault(),void C()):!d||!W||(Object.defineProperty(e,"target",{value:window.frameElement}),parent.wheel(e))}function D(e){var t=e.target,o=e.ctrlKey||e.altKey||e.metaKey||e.shiftKey&&e.keyCode!==v.spacebar;document.body.contains(s)||(s=document.activeElement);var n=/^(button|submit|radio|checkbox|file|color|image)$/i;if(e.defaultPrevented||/^(textarea|select|embed|object)$/i.test(t.nodeName)||N(t,"input")&&!n.test(t.type)||N(s,"video")||function(e){var t=e.target,o=!1;if(-1!=document.URL.indexOf("www.youtube.com/watch"))do{if(o=t.classList&&t.classList.contains("html5-video-controls"))break}while(t=t.parentNode);return o}(e)||t.isContentEditable||o)return!0;if((N(t,"button")||N(t,"input")&&n.test(t.type))&&e.keyCode===v.spacebar)return!0;if(N(t,"input")&&"radio"==t.type&&y[e.keyCode])return!0;var r=0,a=0,l=z(s);if(!l)return!d||!W||parent.keydown(e);var i=l.clientHeight;switch(l==document.body&&(i=window.innerHeight),e.keyCode){case v.up:a=-p.arrowScroll;break;case v.down:a=p.arrowScroll;break;case v.spacebar:a=-(e.shiftKey?1:-1)*i*.9;break;case v.pageup:a=.9*-i;break;case v.pagedown:a=.9*i;break;case v.home:l==document.body&&document.scrollingElement&&(l=document.scrollingElement),a=-l.scrollTop;break;case v.end:var c=l.scrollHeight-l.scrollTop-i;a=0<c?c+10:0;break;case v.left:r=-p.arrowScroll;break;case v.right:r=p.arrowScroll;break;default:return!0}k(l,r,a),e.preventDefault(),C()}function t(e){s=e.target}var n,r,M=(n=0,function(e){return e.uniqueID||(e.uniqueID=n++)}),E={},T={},B={};function C(){clearTimeout(r),r=setInterval(function(){E=T=B={}},1e3)}function H(e,t,o){for(var n=o?E:T,r=e.length;r--;)n[M(e[r])]=t;return t}function z(e){var t=[],o=document.body,n=m.scrollHeight;do{var r=(!1?E:T)[M(e)];if(r)return H(t,r);if(t.push(e),n===e.scrollHeight){var a=O(m)&&O(o)||X(m);if(d&&L(m)||!d&&a)return H(t,q())}else if(L(e)&&X(e))return H(t,e)}while(e=e.parentElement)}function L(e){return e.clientHeight+10<e.scrollHeight}function O(e){return"hidden"!==getComputedStyle(e,"").getPropertyValue("overflow-y")}function X(e){var t=getComputedStyle(e,"").getPropertyValue("overflow-y");return"scroll"===t||"auto"===t}function Y(e,t,o){window.addEventListener(e,t,o||!1)}function A(e,t,o){window.removeEventListener(e,t,o||!1)}function N(e,t){return e&&(e.nodeName||"").toLowerCase()===t.toLowerCase()}if(window.localStorage&&localStorage.SS_deltaBuffer)try{h=localStorage.SS_deltaBuffer.split(",")}catch(e){}function K(e,t){return Math.floor(e/t)==e/t}function P(e){return K(h[0],e)&&K(h[1],e)&&K(h[2],e)}var $,j=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e,t,o){window.setTimeout(e,o||1e3/60)},R=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,q=($=document.scrollingElement,function(){if(!$){var e=document.createElement("div");e.style.cssText="height:10000px;width:1px;",document.body.appendChild(e);var t=document.body.scrollTop;document.documentElement.scrollTop,window.scrollBy(0,3),$=document.body.scrollTop!=t?document.body:document.documentElement,window.scrollBy(0,-3),document.body.removeChild(e)}return $});function V(e){var t,o;return(e*=p.pulseScale)<1?t=e-(1-Math.exp(-e)):(e-=1,t=(o=Math.exp(-1))+(1-Math.exp(-e))*(1-o)),t*p.pulseNormalize}function F(e){return 1<=e?1:e<=0?0:(1==p.pulseNormalize&&(p.pulseNormalize/=V(1)),V(e))}var I=window.navigator.userAgent,_=/Edge/.test(I),W=/chrome/i.test(I)&&!_,U=/safari/i.test(I)&&!_,G=/mobile/i.test(I),J=/Windows NT 6.1/i.test(I)&&/rv:11/i.test(I),Q=U&&(/Version\/8/i.test(I)||/Version\/9/i.test(I)),Z=(W||U||J)&&!G,ee=!1;try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(e){}var te=!!ee&&{passive:!1},oe="onwheel"in document.createElement("div")?"wheel":"mousewheel";function ne(e){for(var t in e)o.hasOwnProperty(t)&&(p[t]=e[t])}oe&&Z&&(Y(oe,e,te),Y("mousedown",t),Y("load",b)),ne.destroy=function(){i&&i.disconnect(),A(oe,e),A("mousedown",t),A("keydown",D),A("resize",c),A("load",b)},window.SmoothScrollOptions&&ne(window.SmoothScrollOptions),"function"==typeof define&&define.amd?define(function(){return ne}):"object"==typeof exports?module.exports=ne:window.SmoothScroll=ne}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNtb290aFNjcm9sbC5qcyJdLCJuYW1lcyI6WyJhY3RpdmVFbGVtZW50Iiwib2JzZXJ2ZXIiLCJyZWZyZXNoU2l6ZSIsImRlbHRhQnVmZmVyVGltZXIiLCJkZWZhdWx0T3B0aW9ucyIsImZyYW1lUmF0ZSIsImFuaW1hdGlvblRpbWUiLCJzdGVwU2l6ZSIsInB1bHNlQWxnb3JpdGhtIiwicHVsc2VTY2FsZSIsInB1bHNlTm9ybWFsaXplIiwiYWNjZWxlcmF0aW9uRGVsdGEiLCJhY2NlbGVyYXRpb25NYXgiLCJrZXlib2FyZFN1cHBvcnQiLCJhcnJvd1Njcm9sbCIsImZpeGVkQmFja2dyb3VuZCIsImV4Y2x1ZGVkIiwib3B0aW9ucyIsImlzRXhjbHVkZWQiLCJpc0ZyYW1lIiwiZGlyZWN0aW9uIiwieCIsInkiLCJpbml0RG9uZSIsInJvb3QiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImRlbHRhQnVmZmVyIiwiaXNNYWMiLCJ0ZXN0IiwibmF2aWdhdG9yIiwicGxhdGZvcm0iLCJrZXkiLCJsZWZ0IiwidXAiLCJyaWdodCIsImRvd24iLCJzcGFjZWJhciIsInBhZ2V1cCIsInBhZ2Vkb3duIiwiZW5kIiwiaG9tZSIsImFycm93S2V5cyIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiaW5pdCIsImJvZHkiLCJodG1sIiwid2luZG93SGVpZ2h0Iiwid2luZG93IiwiaW5uZXJIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJjb21wYXRNb2RlIiwiaW5kZXhPZiIsImFkZEV2ZW50Iiwia2V5ZG93biIsInRvcCIsInNlbGYiLCJpc09sZFNhZmFyaSIsIm9mZnNldEhlaWdodCIsInBlbmRpbmdSZWZyZXNoIiwiZnVsbFBhZ2VFbGVtIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiY3NzVGV4dCIsImFwcGVuZENoaWxkIiwic2V0VGltZW91dCIsImhlaWdodCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiYXR0cmlidXRlcyIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJjbGVhcmZpeCIsImNsZWFyIiwiYmFja2dyb3VuZEF0dGFjaG1lbnQiLCJxdWUiLCJwZW5kaW5nIiwibGFzdFNjcm9sbCIsIkRhdGUiLCJub3ciLCJzY3JvbGxBcnJheSIsImVsZW0iLCJlbGFwc2VkIiwiZmFjdG9yIiwiTWF0aCIsIm1pbiIsInB1c2giLCJsYXN0WCIsImxhc3RZIiwic3RhcnQiLCJzY3JvbGxSb290IiwiZ2V0U2Nyb2xsUm9vdCIsImlzV2luZG93U2Nyb2xsIiwiJHNjcm9sbEJlaGF2aW9yIiwiZWwiLCJpZCIsInVuaXF1ZUlEIiwic21vb3RoQmVoYXZpb3JGb3JFbGVtZW50Iiwic2Nyb2xsQmVoYXZpb3IiLCJnZXRDb21wdXRlZFN0eWxlIiwiaXNTY3JvbGxCZWhhdmlvclNtb290aCIsInN0ZXAiLCJ0aW1lIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJpIiwibGVuZ3RoIiwiaXRlbSIsImZpbmlzaGVkIiwicG9zaXRpb24iLCJwdWxzZSIsInNwbGljZSIsInNjcm9sbEJ5Iiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsInJlcXVlc3RGcmFtZSIsIndoZWVsIiwiZXZlbnQiLCJ0YXJnZXQiLCJkZWZhdWx0UHJldmVudGVkIiwiY3RybEtleSIsImlzTm9kZU5hbWUiLCJzcmMiLCJzaGFkb3dSb290IiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsImlzRGl2aXNpYmxlIiwiYWJzIiwid2hlZWxEZWx0YSIsImRlbHRhTW9kZSIsIm92ZXJmbG93aW5nIiwib3ZlcmZsb3dpbmdBbmNlc3RvciIsInNoaWZ0IiwiY2xlYXJUaW1lb3V0IiwibG9jYWxTdG9yYWdlIiwiU1NfZGVsdGFCdWZmZXIiLCJqb2luIiwiZSIsImRwaVNjYWxlZFdoZWVsRGVsdGEiLCJhbGxEZWx0YXNEaXZpc2FibGVCeSIsImlzVG91Y2hwYWQiLCJwcmV2ZW50RGVmYXVsdCIsInNjaGVkdWxlQ2xlYXJDYWNoZSIsImlzQ2hyb21lIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImZyYW1lRWxlbWVudCIsInBhcmVudCIsIm1vZGlmaWVyIiwiYWx0S2V5IiwibWV0YUtleSIsInNoaWZ0S2V5Iiwia2V5Q29kZSIsImNvbnRhaW5zIiwiYnV0dG9uVHlwZXMiLCJub2RlTmFtZSIsInR5cGUiLCJpc0NvbnRyb2wiLCJVUkwiLCJjbGFzc0xpc3QiLCJwYXJlbnROb2RlIiwiaXNJbnNpZGVZb3V0dWJlVmlkZW8iLCJpc0NvbnRlbnRFZGl0YWJsZSIsImNsaWVudEhlaWdodCIsInNjcm9sbGluZ0VsZW1lbnQiLCJzY3JvbGxSZW1haW5pbmciLCJtb3VzZWRvd24iLCJjbGVhckNhY2hlVGltZXIiLCJjYWNoZVgiLCJjYWNoZVkiLCJzZXRJbnRlcnZhbCIsInNldENhY2hlIiwiZWxlbXMiLCJjYWNoZSIsInJvb3RTY3JvbGxIZWlnaHQiLCJjYWNoZWQiLCJpc092ZXJmbG93Q1NTIiwib3ZlcmZsb3dOb3RIaWRkZW4iLCJvdmVyZmxvd0F1dG9PclNjcm9sbCIsImlzQ29udGVudE92ZXJmbG93aW5nIiwicGFyZW50RWxlbWVudCIsImdldFByb3BlcnR5VmFsdWUiLCJvdmVyZmxvdyIsImZuIiwiYXJnIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRhZyIsInRvTG93ZXJDYXNlIiwic3BsaXQiLCJuIiwiZGl2aXNvciIsImZsb29yIiwiU0NST0xMX1JPT1QiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsImVsZW1lbnQiLCJkZWxheSIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJNb3pNdXRhdGlvbk9ic2VydmVyIiwiZHVtbXkiLCJib2R5U2Nyb2xsVG9wIiwicmVtb3ZlQ2hpbGQiLCJwdWxzZV8iLCJ2YWwiLCJleHAiLCJ1c2VyQWdlbnQiLCJpc0VkZ2UiLCJpc1NhZmFyaSIsImlzTW9iaWxlIiwiaXNJRVdpbjciLCJpc0VuYWJsZWRGb3JCcm93c2VyIiwic3VwcG9ydHNQYXNzaXZlIiwiZ2V0Iiwid2hlZWxPcHQiLCJwYXNzaXZlIiwid2hlZWxFdmVudCIsIlNtb290aFNjcm9sbCIsIm9wdGlvbnNUb1NldCIsImhhc093blByb3BlcnR5IiwiZGVzdHJveSIsImRpc2Nvbm5lY3QiLCJTbW9vdGhTY3JvbGxPcHRpb25zIiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkNBZUEsV0FHQSxJQW1DSUEsRUFDQUMsRUFDQUMsRUFFQUMsRUF2Q0FDLEVBQWlCLENBR2pCQyxVQUFtQixJQUNuQkMsY0FBbUIsSUFDbkJDLFNBQW1CLElBSW5CQyxnQkFBbUIsRUFDbkJDLFdBQW1CLEVBQ25CQyxlQUFtQixFQUduQkMsa0JBQW9CLEdBQ3BCQyxnQkFBb0IsRUFHcEJDLGlCQUFvQixFQUNwQkMsWUFBb0IsR0FHcEJDLGlCQUFvQixFQUNwQkMsU0FBb0IsSUFHcEJDLEVBQVViLEVBSVZjLEdBQWEsRUFDYkMsR0FBVSxFQUNWQyxFQUFZLENBQUVDLEVBQUcsRUFBR0MsRUFBRyxHQUN2QkMsR0FBWSxFQUNaQyxFQUFPQyxTQUFTQyxnQkFJaEJDLEVBQWMsR0FFZEMsRUFBUSxPQUFPQyxLQUFLQyxVQUFVQyxVQUU5QkMsRUFBTSxDQUFFQyxLQUFNLEdBQUlDLEdBQUksR0FBSUMsTUFBTyxHQUFJQyxLQUFNLEdBQUlDLFNBQVUsR0FDakRDLE9BQVEsR0FBSUMsU0FBVSxHQUFJQyxJQUFLLEdBQUlDLEtBQU0sSUFDakRDLEVBQVksQ0FBRUMsR0FBSSxFQUFHQyxHQUFJLEVBQUdDLEdBQUksRUFBR0MsR0FBSSxHQWtCM0MsU0FBU0MsSUFFTCxJQUFJeEIsR0FBYUUsU0FBU3VCLEtBQTFCLENBRUF6QixHQUFXLEVBRVgsSUFBSXlCLEVBQU92QixTQUFTdUIsS0FDaEJDLEVBQU94QixTQUFTQyxnQkFDaEJ3QixFQUFlQyxPQUFPQyxZQUN0QkMsRUFBZUwsRUFBS0ssYUFTeEIsR0FO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R0FDdEJwSCxFQUFTLE9BQVFULElBYXJCbUwsR0FBYUcsUUFsbUJiLFdBQ0lwTyxHQUFZQSxFQUFTcU8sYUFDckJ0QyxFQUFZaUMsR0FBWTFHLEdBQ3hCeUUsRUFBWSxZQUFhcEIsR0FDekJvQixFQUFZLFVBQVd2SSxHQUN2QnVJLEVBQVksU0FBVTlMLEdBQ3RCOEwsRUFBWSxPQUFRakosSUE4bEJwQkksT0FBT29MLHFCQUNQTCxHQUFhL0ssT0FBT29MLHFCQUVGLG1CQUFYQyxRQUF5QkEsT0FBT0MsSUFDdkNELE9BQU8sV0FDSCxPQUFPTixLQUVOLGlCQUFtQlEsUUFDeEJDLE9BQU9ELFFBQVVSLEdBRWpCL0ssT0FBTytLLGFBQWVBLEdBbHdCMUIiLCJmaWxlIjoiU21vb3RoU2Nyb2xsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cclxuLy8gU21vb3RoU2Nyb2xsIGZvciB3ZWJzaXRlcyB2MS40LjkgKEJhbGF6cyBHYWxhbWJvc2kpXHJcbi8vIGh0dHA6Ly93d3cuc21vb3Roc2Nyb2xsLm5ldC9cclxuLy9cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZS5cclxuLy9cclxuLy8gWW91IG1heSB1c2UgaXQgaW4geW91ciB0aGVtZSBpZiB5b3UgY3JlZGl0IG1lLiBcclxuLy8gSXQgaXMgYWxzbyBmcmVlIHRvIHVzZSBvbiBhbnkgaW5kaXZpZHVhbCB3ZWJzaXRlLlxyXG4vL1xyXG4vLyBFeGNlcHRpb246XHJcbi8vIFRoZSBvbmx5IHJlc3RyaWN0aW9uIGlzIHRvIG5vdCBwdWJsaXNoIGFueSAgXHJcbi8vIGV4dGVuc2lvbiBmb3IgYnJvd3NlcnMgb3IgbmF0aXZlIGFwcGxpY2F0aW9uXHJcbi8vIHdpdGhvdXQgZ2V0dGluZyBhIHdyaXR0ZW4gcGVybWlzc2lvbiBmaXJzdC5cclxuLy9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgXHJcbi8vIFNjcm9sbCBWYXJpYWJsZXMgKHR3ZWFrYWJsZSlcclxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG5cclxuICAgIC8vIFNjcm9sbGluZyBDb3JlXHJcbiAgICBmcmFtZVJhdGUgICAgICAgIDogMTUwLCAvLyBbSHpdXHJcbiAgICBhbmltYXRpb25UaW1lICAgIDogNDAwLCAvLyBbbXNdXHJcbiAgICBzdGVwU2l6ZSAgICAgICAgIDogMTAwLCAvLyBbcHhdXHJcblxyXG4gICAgLy8gUHVsc2UgKGxlc3MgdHdlYWthYmxlKVxyXG4gICAgLy8gcmF0aW8gb2YgXCJ0YWlsXCIgdG8gXCJhY2NlbGVyYXRpb25cIlxyXG4gICAgcHVsc2VBbGdvcml0aG0gICA6IHRydWUsXHJcbiAgICBwdWxzZVNjYWxlICAgICAgIDogNCxcclxuICAgIHB1bHNlTm9ybWFsaXplICAgOiAxLFxyXG5cclxuICAgIC8vIEFjY2VsZXJhdGlvblxyXG4gICAgYWNjZWxlcmF0aW9uRGVsdGEgOiA1MCwgIC8vIDUwXHJcbiAgICBhY2NlbGVyYXRpb25NYXggICA6IDMsICAgLy8gM1xyXG5cclxuICAgIC8vIEtleWJvYXJkIFNldHRpbmdzXHJcbiAgICBrZXlib2FyZFN1cHBvcnQgICA6IHRydWUsICAvLyBvcHRpb25cclxuICAgIGFycm93U2Nyb2xsICAgICAgIDogNTAsICAgIC8vIFtweF1cclxuXHJcbiAgICAvLyBPdGhlclxyXG4gICAgZml4ZWRCYWNrZ3JvdW5kICAgOiB0cnVlLCBcclxuICAgIGV4Y2x1ZGVkICAgICAgICAgIDogJycgICAgXHJcbn07XHJcblxyXG52YXIgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xyXG5cclxuXHJcbi8vIE90aGVyIFZhcmlhYmxlc1xyXG52YXIgaXNFeGNsdWRlZCA9IGZhbHNlO1xyXG52YXIgaXNGcmFtZSA9IGZhbHNlO1xyXG52YXIgZGlyZWN0aW9uID0geyB4OiAwLCB5OiAwIH07XHJcbnZhciBpbml0RG9uZSAgPSBmYWxzZTtcclxudmFyIHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbnZhciBhY3RpdmVFbGVtZW50O1xyXG52YXIgb2JzZXJ2ZXI7XHJcbnZhciByZWZyZXNoU2l6ZTtcclxudmFyIGRlbHRhQnVmZmVyID0gW107XHJcbnZhciBkZWx0YUJ1ZmZlclRpbWVyO1xyXG52YXIgaXNNYWMgPSAvXk1hYy8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pO1xyXG5cclxudmFyIGtleSA9IHsgbGVmdDogMzcsIHVwOiAzOCwgcmlnaHQ6IDM5LCBkb3duOiA0MCwgc3BhY2ViYXI6IDMyLCBcclxuICAgICAgICAgICAgcGFnZXVwOiAzMywgcGFnZWRvd246IDM0LCBlbmQ6IDM1LCBob21lOiAzNiB9O1xyXG52YXIgYXJyb3dLZXlzID0geyAzNzogMSwgMzg6IDEsIDM5OiAxLCA0MDogMSB9O1xyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIElOSVRJQUxJWkVcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHNtb290aCBzY3JvbGxpbmcgaXMgYWxsb3dlZC4gU2h1dHMgZG93biBldmVyeXRoaW5nIGlmIG5vdC5cclxuICovXHJcbmZ1bmN0aW9uIGluaXRUZXN0KCkge1xyXG4gICAgaWYgKG9wdGlvbnMua2V5Ym9hcmRTdXBwb3J0KSB7XHJcbiAgICAgICAgYWRkRXZlbnQoJ2tleWRvd24nLCBrZXlkb3duKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFNldHMgdXAgc2Nyb2xscyBhcnJheSwgZGV0ZXJtaW5lcyBpZiBmcmFtZXMgYXJlIGludm9sdmVkLlxyXG4gKi9cclxuZnVuY3Rpb24gaW5pdCgpIHtcclxuICBcclxuICAgIGlmIChpbml0RG9uZSB8fCAhZG9jdW1lbnQuYm9keSkgcmV0dXJuO1xyXG5cclxuICAgIGluaXREb25lID0gdHJ1ZTtcclxuXHJcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XHJcbiAgICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICAgIHZhciB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7IFxyXG4gICAgdmFyIHNjcm9sbEhlaWdodCA9IGJvZHkuc2Nyb2xsSGVpZ2h0O1xyXG4gICAgXHJcbiAgICAvLyBjaGVjayBjb21wYXQgbW9kZSBmb3Igcm9vdCBlbGVtZW50XHJcbiAgICByb290ID0gKGRvY3VtZW50LmNvbXBhdE1vZGUuaW5kZXhPZignQ1NTJykgPj0gMCkgPyBodG1sIDogYm9keTtcclxuICAgIGFjdGl2ZUVsZW1lbnQgPSBib2R5O1xyXG4gICAgXHJcbiAgICBpbml0VGVzdCgpO1xyXG5cclxuICAgIC8vIENoZWNrcyBpZiB0aGlzIHNjcmlwdCBpcyBydW5uaW5nIGluIGEgZnJhbWVcclxuICAgIGlmICh0b3AgIT0gc2VsZikge1xyXG4gICAgICAgIGlzRnJhbWUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2FmYXJpIDEwIGZpeGVkIGl0LCBDaHJvbWUgZml4ZWQgaXQgaW4gdjQ1OlxyXG4gICAgICogVGhpcyBmaXhlcyBhIGJ1ZyB3aGVyZSB0aGUgYXJlYXMgbGVmdCBhbmQgcmlnaHQgdG8gXHJcbiAgICAgKiB0aGUgY29udGVudCBkb2VzIG5vdCB0cmlnZ2VyIHRoZSBvbm1vdXNld2hlZWwgZXZlbnRcclxuICAgICAqIG9uIHNvbWUgcGFnZXMuIGUuZy46IGh0bWwsIGJvZHkgeyBoZWlnaHQ6IDEwMCUgfVxyXG4gICAgICovXHJcbiAgICBlbHNlIGlmIChpc09sZFNhZmFyaSAmJlxyXG4gICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ID4gd2luZG93SGVpZ2h0ICYmXHJcbiAgICAgICAgICAgIChib2R5Lm9mZnNldEhlaWdodCA8PSB3aW5kb3dIZWlnaHQgfHwgXHJcbiAgICAgICAgICAgICBodG1sLm9mZnNldEhlaWdodCA8PSB3aW5kb3dIZWlnaHQpKSB7XHJcblxyXG4gICAgICAgIHZhciBmdWxsUGFnZUVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBmdWxsUGFnZUVsZW0uc3R5bGUuY3NzVGV4dCA9ICdwb3NpdGlvbjphYnNvbHV0ZTsgei1pbmRleDotMTAwMDA7ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvcDowOyBsZWZ0OjA7IHJpZ2h0OjA7IGhlaWdodDonICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdC5zY3JvbGxIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZnVsbFBhZ2VFbGVtKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBET00gY2hhbmdlZCAodGhyb3R0bGVkKSB0byBmaXggaGVpZ2h0XHJcbiAgICAgICAgdmFyIHBlbmRpbmdSZWZyZXNoO1xyXG4gICAgICAgIHJlZnJlc2hTaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAocGVuZGluZ1JlZnJlc2gpIHJldHVybjsgLy8gY291bGQgYWxzbyBiZTogY2xlYXJUaW1lb3V0KHBlbmRpbmdSZWZyZXNoKTtcclxuICAgICAgICAgICAgcGVuZGluZ1JlZnJlc2ggPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0V4Y2x1ZGVkKSByZXR1cm47IC8vIGNvdWxkIGJlIHJ1bm5pbmcgYWZ0ZXIgY2xlYW51cFxyXG4gICAgICAgICAgICAgICAgZnVsbFBhZ2VFbGVtLnN0eWxlLmhlaWdodCA9ICcwJztcclxuICAgICAgICAgICAgICAgIGZ1bGxQYWdlRWxlbS5zdHlsZS5oZWlnaHQgPSByb290LnNjcm9sbEhlaWdodCArICdweCc7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nUmVmcmVzaCA9IG51bGw7XHJcbiAgICAgICAgICAgIH0sIDUwMCk7IC8vIGFjdCByYXJlbHkgdG8gc3RheSBmYXN0XHJcbiAgICAgICAgfTtcclxuICBcclxuICAgICAgICBzZXRUaW1lb3V0KHJlZnJlc2hTaXplLCAxMCk7XHJcblxyXG4gICAgICAgIGFkZEV2ZW50KCdyZXNpemUnLCByZWZyZXNoU2l6ZSk7XHJcblxyXG4gICAgICAgIC8vIFRPRE86IGF0dHJpYnV0ZUZpbHRlcj9cclxuICAgICAgICB2YXIgY29uZmlnID0ge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLCBcclxuICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLCBcclxuICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogZmFsc2UgXHJcbiAgICAgICAgICAgIC8vIHN1YnRyZWU6IHRydWVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHJlZnJlc2hTaXplKTtcclxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGJvZHksIGNvbmZpZyk7XHJcblxyXG4gICAgICAgIGlmIChyb290Lm9mZnNldEhlaWdodCA8PSB3aW5kb3dIZWlnaHQpIHtcclxuICAgICAgICAgICAgdmFyIGNsZWFyZml4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7ICAgXHJcbiAgICAgICAgICAgIGNsZWFyZml4LnN0eWxlLmNsZWFyID0gJ2JvdGgnO1xyXG4gICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKGNsZWFyZml4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZGlzYWJsZSBmaXhlZCBiYWNrZ3JvdW5kXHJcbiAgICBpZiAoIW9wdGlvbnMuZml4ZWRCYWNrZ3JvdW5kICYmICFpc0V4Y2x1ZGVkKSB7XHJcbiAgICAgICAgYm9keS5zdHlsZS5iYWNrZ3JvdW5kQXR0YWNobWVudCA9ICdzY3JvbGwnO1xyXG4gICAgICAgIGh0bWwuc3R5bGUuYmFja2dyb3VuZEF0dGFjaG1lbnQgPSAnc2Nyb2xsJztcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIGFuZCBvdGhlciB0cmFjZXMgbGVmdCBvbiB0aGUgcGFnZS5cclxuICovXHJcbmZ1bmN0aW9uIGNsZWFudXAoKSB7XHJcbiAgICBvYnNlcnZlciAmJiBvYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICByZW1vdmVFdmVudCh3aGVlbEV2ZW50LCB3aGVlbCk7XHJcbiAgICByZW1vdmVFdmVudCgnbW91c2Vkb3duJywgbW91c2Vkb3duKTtcclxuICAgIHJlbW92ZUV2ZW50KCdrZXlkb3duJywga2V5ZG93bik7XHJcbiAgICByZW1vdmVFdmVudCgncmVzaXplJywgcmVmcmVzaFNpemUpO1xyXG4gICAgcmVtb3ZlRXZlbnQoJ2xvYWQnLCBpbml0KTtcclxufVxyXG5cclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogU0NST0xMSU5HIFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gXHJcbnZhciBxdWUgPSBbXTtcclxudmFyIHBlbmRpbmcgPSBmYWxzZTtcclxudmFyIGxhc3RTY3JvbGwgPSBEYXRlLm5vdygpO1xyXG5cclxuLyoqXHJcbiAqIFB1c2hlcyBzY3JvbGwgYWN0aW9ucyB0byB0aGUgc2Nyb2xsaW5nIHF1ZXVlLlxyXG4gKi9cclxuZnVuY3Rpb24gc2Nyb2xsQXJyYXkoZWxlbSwgbGVmdCwgdG9wKSB7XHJcbiAgICBcclxuICAgIGRpcmVjdGlvbkNoZWNrKGxlZnQsIHRvcCk7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuYWNjZWxlcmF0aW9uTWF4ICE9IDEpIHtcclxuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB2YXIgZWxhcHNlZCA9IG5vdyAtIGxhc3RTY3JvbGw7XHJcbiAgICAgICAgaWYgKGVsYXBzZWQgPCBvcHRpb25zLmFjY2VsZXJhdGlvbkRlbHRhKSB7XHJcbiAgICAgICAgICAgIHZhciBmYWN0b3IgPSAoMSArICg1MCAvIGVsYXBzZWQpKSAvIDI7XHJcbiAgICAgICAgICAgIGlmIChmYWN0b3IgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBmYWN0b3IgPSBNYXRoLm1pbihmYWN0b3IsIG9wdGlvbnMuYWNjZWxlcmF0aW9uTWF4KTtcclxuICAgICAgICAgICAgICAgIGxlZnQgKj0gZmFjdG9yO1xyXG4gICAgICAgICAgICAgICAgdG9wICAqPSBmYWN0b3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGFzdFNjcm9sbCA9IERhdGUubm93KCk7XHJcbiAgICB9ICAgICAgICAgIFxyXG4gICAgXHJcbiAgICAvLyBwdXNoIGEgc2Nyb2xsIGNvbW1hbmRcclxuICAgIHF1ZS5wdXNoKHtcclxuICAgICAgICB4OiBsZWZ0LCBcclxuICAgICAgICB5OiB0b3AsIFxyXG4gICAgICAgIGxhc3RYOiAobGVmdCA8IDApID8gMC45OSA6IC0wLjk5LFxyXG4gICAgICAgIGxhc3RZOiAodG9wICA8IDApID8gMC45OSA6IC0wLjk5LCBcclxuICAgICAgICBzdGFydDogRGF0ZS5ub3coKVxyXG4gICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAvLyBkb24ndCBhY3QgaWYgdGhlcmUncyBhIHBlbmRpbmcgcXVldWVcclxuICAgIGlmIChwZW5kaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfSAgXHJcblxyXG4gICAgdmFyIHNjcm9sbFJvb3QgPSBnZXRTY3JvbGxSb290KCk7XHJcbiAgICB2YXIgaXNXaW5kb3dTY3JvbGwgPSAoZWxlbSA9PT0gc2Nyb2xsUm9vdCB8fCBlbGVtID09PSBkb2N1bWVudC5ib2R5KTtcclxuICAgIFxyXG4gICAgLy8gaWYgd2UgaGF2ZW4ndCBhbHJlYWR5IGZpeGVkIHRoZSBiZWhhdmlvciwgXHJcbiAgICAvLyBhbmQgaXQgbmVlZHMgZml4aW5nIGZvciB0aGlzIHNlc2hcclxuICAgIGlmIChlbGVtLiRzY3JvbGxCZWhhdmlvciA9PSBudWxsICYmIGlzU2Nyb2xsQmVoYXZpb3JTbW9vdGgoZWxlbSkpIHtcclxuICAgICAgICBlbGVtLiRzY3JvbGxCZWhhdmlvciA9IGVsZW0uc3R5bGUuc2Nyb2xsQmVoYXZpb3I7XHJcbiAgICAgICAgZWxlbS5zdHlsZS5zY3JvbGxCZWhhdmlvciA9ICdhdXRvJztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc3RlcCA9IGZ1bmN0aW9uICh0aW1lKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgdmFyIHNjcm9sbFggPSAwO1xyXG4gICAgICAgIHZhciBzY3JvbGxZID0gMDsgXHJcbiAgICBcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSBxdWVbaV07XHJcbiAgICAgICAgICAgIHZhciBlbGFwc2VkICA9IG5vdyAtIGl0ZW0uc3RhcnQ7XHJcbiAgICAgICAgICAgIHZhciBmaW5pc2hlZCA9IChlbGFwc2VkID49IG9wdGlvbnMuYW5pbWF0aW9uVGltZSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBzY3JvbGwgcG9zaXRpb246IFswLCAxXVxyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSAoZmluaXNoZWQpID8gMSA6IGVsYXBzZWQgLyBvcHRpb25zLmFuaW1hdGlvblRpbWU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBlYXNpbmcgW29wdGlvbmFsXVxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5wdWxzZUFsZ29yaXRobSkge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwdWxzZShwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIG9ubHkgbmVlZCB0aGUgZGlmZmVyZW5jZVxyXG4gICAgICAgICAgICB2YXIgeCA9IChpdGVtLnggKiBwb3NpdGlvbiAtIGl0ZW0ubGFzdFgpID4+IDA7XHJcbiAgICAgICAgICAgIHZhciB5ID0gKGl0ZW0ueSAqIHBvc2l0aW9uIC0gaXRlbS5sYXN0WSkgPj4gMDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGFkZCB0aGlzIHRvIHRoZSB0b3RhbCBzY3JvbGxpbmdcclxuICAgICAgICAgICAgc2Nyb2xsWCArPSB4O1xyXG4gICAgICAgICAgICBzY3JvbGxZICs9IHk7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyB1cGRhdGUgbGFzdCB2YWx1ZXNcclxuICAgICAgICAgICAgaXRlbS5sYXN0WCArPSB4O1xyXG4gICAgICAgICAgICBpdGVtLmxhc3RZICs9IHk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGRlbGV0ZSBhbmQgc3RlcCBiYWNrIGlmIGl0J3Mgb3ZlclxyXG4gICAgICAgICAgICBpZiAoZmluaXNoZWQpIHtcclxuICAgICAgICAgICAgICAgIHF1ZS5zcGxpY2UoaSwgMSk7IGktLTtcclxuICAgICAgICAgICAgfSAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzY3JvbGwgbGVmdCBhbmQgdG9wXHJcbiAgICAgICAgaWYgKGlzV2luZG93U2Nyb2xsKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxCeShzY3JvbGxYLCBzY3JvbGxZKTtcclxuICAgICAgICB9IFxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc2Nyb2xsWCkgZWxlbS5zY3JvbGxMZWZ0ICs9IHNjcm9sbFg7XHJcbiAgICAgICAgICAgIGlmIChzY3JvbGxZKSBlbGVtLnNjcm9sbFRvcCAgKz0gc2Nyb2xsWTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBjbGVhbiB1cCBpZiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkb1xyXG4gICAgICAgIGlmICghbGVmdCAmJiAhdG9wKSB7XHJcbiAgICAgICAgICAgIHF1ZSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAocXVlLmxlbmd0aCkgeyBcclxuICAgICAgICAgICAgcmVxdWVzdEZyYW1lKHN0ZXAsIGVsZW0sICgxMDAwIC8gb3B0aW9ucy5mcmFtZVJhdGUgKyAxKSk7IFxyXG4gICAgICAgIH0gZWxzZSB7IFxyXG4gICAgICAgICAgICBwZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIHJlc3RvcmUgZGVmYXVsdCBiZWhhdmlvciBhdCB0aGUgZW5kIG9mIHNjcm9sbGluZyBzZXNoXHJcbiAgICAgICAgICAgIGlmIChlbGVtLiRzY3JvbGxCZWhhdmlvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtLnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gZWxlbS4kc2Nyb2xsQmVoYXZpb3I7XHJcbiAgICAgICAgICAgICAgICBlbGVtLiRzY3JvbGxCZWhhdmlvciA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyBzdGFydCBhIG5ldyBxdWV1ZSBvZiBhY3Rpb25zXHJcbiAgICByZXF1ZXN0RnJhbWUoc3RlcCwgZWxlbSwgMCk7XHJcbiAgICBwZW5kaW5nID0gdHJ1ZTtcclxufVxyXG5cclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBFVkVOVFNcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIE1vdXNlIHdoZWVsIGhhbmRsZXIuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxyXG4gKi9cclxuZnVuY3Rpb24gd2hlZWwoZXZlbnQpIHtcclxuXHJcbiAgICBpZiAoIWluaXREb25lKSB7XHJcbiAgICAgICAgaW5pdCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG5cclxuICAgIC8vIGxlYXZlIGVhcmx5IGlmIGRlZmF1bHQgYWN0aW9uIGlzIHByZXZlbnRlZCAgIFxyXG4gICAgLy8gb3IgaXQncyBhIHpvb21pbmcgZXZlbnQgd2l0aCBDVFJMIFxyXG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgfHwgZXZlbnQuY3RybEtleSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBsZWF2ZSBlbWJlZGRlZCBjb250ZW50IGFsb25lIChmbGFzaCAmIHBkZilcclxuICAgIGlmIChpc05vZGVOYW1lKGFjdGl2ZUVsZW1lbnQsICdlbWJlZCcpIHx8IFxyXG4gICAgICAgKGlzTm9kZU5hbWUodGFyZ2V0LCAnZW1iZWQnKSAmJiAvXFwucGRmL2kudGVzdCh0YXJnZXQuc3JjKSkgfHxcclxuICAgICAgICBpc05vZGVOYW1lKGFjdGl2ZUVsZW1lbnQsICdvYmplY3QnKSB8fFxyXG4gICAgICAgIHRhcmdldC5zaGFkb3dSb290KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGRlbHRhWCA9IC1ldmVudC53aGVlbERlbHRhWCB8fCBldmVudC5kZWx0YVggfHwgMDtcclxuICAgIHZhciBkZWx0YVkgPSAtZXZlbnQud2hlZWxEZWx0YVkgfHwgZXZlbnQuZGVsdGFZIHx8IDA7XHJcbiAgICBcclxuICAgIGlmIChpc01hYykge1xyXG4gICAgICAgIGlmIChldmVudC53aGVlbERlbHRhWCAmJiBpc0RpdmlzaWJsZShldmVudC53aGVlbERlbHRhWCwgMTIwKSkge1xyXG4gICAgICAgICAgICBkZWx0YVggPSAtMTIwICogKGV2ZW50LndoZWVsRGVsdGFYIC8gTWF0aC5hYnMoZXZlbnQud2hlZWxEZWx0YVgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV2ZW50LndoZWVsRGVsdGFZICYmIGlzRGl2aXNpYmxlKGV2ZW50LndoZWVsRGVsdGFZLCAxMjApKSB7XHJcbiAgICAgICAgICAgIGRlbHRhWSA9IC0xMjAgKiAoZXZlbnQud2hlZWxEZWx0YVkgLyBNYXRoLmFicyhldmVudC53aGVlbERlbHRhWSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gdXNlIHdoZWVsRGVsdGEgaWYgZGVsdGFYL1kgaXMgbm90IGF2YWlsYWJsZVxyXG4gICAgaWYgKCFkZWx0YVggJiYgIWRlbHRhWSkge1xyXG4gICAgICAgIGRlbHRhWSA9IC1ldmVudC53aGVlbERlbHRhIHx8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGluZSBiYXNlZCBzY3JvbGxpbmcgKEZpcmVmb3ggbW9zdGx5KVxyXG4gICAgaWYgKGV2ZW50LmRlbHRhTW9kZSA9PT0gMSkge1xyXG4gICAgICAgIGRlbHRhWCAqPSA0MDtcclxuICAgICAgICBkZWx0YVkgKj0gNDA7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG92ZXJmbG93aW5nID0gb3ZlcmZsb3dpbmdBbmNlc3Rvcih0YXJnZXQpO1xyXG5cclxuICAgIC8vIG5vdGhpbmcgdG8gZG8gaWYgdGhlcmUncyBubyBlbGVtZW50IHRoYXQncyBzY3JvbGxhYmxlXHJcbiAgICBpZiAoIW92ZXJmbG93aW5nKSB7XHJcbiAgICAgICAgLy8gZXhjZXB0IENocm9tZSBpZnJhbWVzIHNlZW0gdG8gZWF0IHdoZWVsIGV2ZW50cywgd2hpY2ggd2UgbmVlZCB0byBcclxuICAgICAgICAvLyBwcm9wYWdhdGUgdXAsIGlmIHRoZSBpZnJhbWUgaGFzIG5vdGhpbmcgb3ZlcmZsb3dpbmcgdG8gc2Nyb2xsXHJcbiAgICAgICAgaWYgKGlzRnJhbWUgJiYgaXNDaHJvbWUpICB7XHJcbiAgICAgICAgICAgIC8vIGNoYW5nZSB0YXJnZXQgdG8gaWZyYW1lIGVsZW1lbnQgaXRzZWxmIGZvciB0aGUgcGFyZW50IGZyYW1lXHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgXCJ0YXJnZXRcIiwge3ZhbHVlOiB3aW5kb3cuZnJhbWVFbGVtZW50fSk7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQud2hlZWwoZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gY2hlY2sgaWYgaXQncyBhIHRvdWNocGFkIHNjcm9sbCB0aGF0IHNob3VsZCBiZSBpZ25vcmVkXHJcbiAgICBpZiAoaXNUb3VjaHBhZChkZWx0YVkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2NhbGUgYnkgc3RlcCBzaXplXHJcbiAgICAvLyBkZWx0YSBpcyAxMjAgbW9zdCBvZiB0aGUgdGltZVxyXG4gICAgLy8gc3luYXB0aWNzIHNlZW1zIHRvIHNlbmQgMSBzb21ldGltZXNcclxuICAgIGlmIChNYXRoLmFicyhkZWx0YVgpID4gMS4yKSB7XHJcbiAgICAgICAgZGVsdGFYICo9IG9wdGlvbnMuc3RlcFNpemUgLyAxMjA7XHJcbiAgICB9XHJcbiAgICBpZiAoTWF0aC5hYnMoZGVsdGFZKSA+IDEuMikge1xyXG4gICAgICAgIGRlbHRhWSAqPSBvcHRpb25zLnN0ZXBTaXplIC8gMTIwO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzY3JvbGxBcnJheShvdmVyZmxvd2luZywgZGVsdGFYLCBkZWx0YVkpO1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIHNjaGVkdWxlQ2xlYXJDYWNoZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogS2V5ZG93biBldmVudCBoYW5kbGVyLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcclxuICovXHJcbmZ1bmN0aW9uIGtleWRvd24oZXZlbnQpIHtcclxuXHJcbiAgICB2YXIgdGFyZ2V0ICAgPSBldmVudC50YXJnZXQ7XHJcbiAgICB2YXIgbW9kaWZpZXIgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5tZXRhS2V5IHx8IFxyXG4gICAgICAgICAgICAgICAgICAoZXZlbnQuc2hpZnRLZXkgJiYgZXZlbnQua2V5Q29kZSAhPT0ga2V5LnNwYWNlYmFyKTtcclxuICAgIFxyXG4gICAgLy8gb3VyIG93biB0cmFja2VkIGFjdGl2ZSBlbGVtZW50IGNvdWxkJ3ZlIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBET01cclxuICAgIGlmICghZG9jdW1lbnQuYm9keS5jb250YWlucyhhY3RpdmVFbGVtZW50KSkge1xyXG4gICAgICAgIGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGRvIG5vdGhpbmcgaWYgdXNlciBpcyBlZGl0aW5nIHRleHRcclxuICAgIC8vIG9yIHVzaW5nIGEgbW9kaWZpZXIga2V5IChleGNlcHQgc2hpZnQpXHJcbiAgICAvLyBvciBpbiBhIGRyb3Bkb3duXHJcbiAgICAvLyBvciBpbnNpZGUgaW50ZXJhY3RpdmUgZWxlbWVudHNcclxuICAgIHZhciBpbnB1dE5vZGVOYW1lcyA9IC9eKHRleHRhcmVhfHNlbGVjdHxlbWJlZHxvYmplY3QpJC9pO1xyXG4gICAgdmFyIGJ1dHRvblR5cGVzID0gL14oYnV0dG9ufHN1Ym1pdHxyYWRpb3xjaGVja2JveHxmaWxlfGNvbG9yfGltYWdlKSQvaTtcclxuICAgIGlmICggZXZlbnQuZGVmYXVsdFByZXZlbnRlZCB8fFxyXG4gICAgICAgICBpbnB1dE5vZGVOYW1lcy50ZXN0KHRhcmdldC5ub2RlTmFtZSkgfHxcclxuICAgICAgICAgaXNOb2RlTmFtZSh0YXJnZXQsICdpbnB1dCcpICYmICFidXR0b25UeXBlcy50ZXN0KHRhcmdldC50eXBlKSB8fFxyXG4gICAgICAgICBpc05vZGVOYW1lKGFjdGl2ZUVsZW1lbnQsICd2aWRlbycpIHx8XHJcbiAgICAgICAgIGlzSW5zaWRlWW91dHViZVZpZGVvKGV2ZW50KSB8fFxyXG4gICAgICAgICB0YXJnZXQuaXNDb250ZW50RWRpdGFibGUgfHwgXHJcbiAgICAgICAgIG1vZGlmaWVyICkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBbc3BhY2ViYXJdIHNob3VsZCB0cmlnZ2VyIGJ1dHRvbiBwcmVzcywgbGVhdmUgaXQgYWxvbmVcclxuICAgIGlmICgoaXNOb2RlTmFtZSh0YXJnZXQsICdidXR0b24nKSB8fFxyXG4gICAgICAgICBpc05vZGVOYW1lKHRhcmdldCwgJ2lucHV0JykgJiYgYnV0dG9uVHlwZXMudGVzdCh0YXJnZXQudHlwZSkpICYmXHJcbiAgICAgICAgZXZlbnQua2V5Q29kZSA9PT0ga2V5LnNwYWNlYmFyKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFthcnJ3b3cga2V5c10gb24gcmFkaW8gYnV0dG9ucyBzaG91bGQgYmUgbGVmdCBhbG9uZVxyXG4gICAgaWYgKGlzTm9kZU5hbWUodGFyZ2V0LCAnaW5wdXQnKSAmJiB0YXJnZXQudHlwZSA9PSAncmFkaW8nICYmXHJcbiAgICAgICAgYXJyb3dLZXlzW2V2ZW50LmtleUNvZGVdKSAge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIHNoaWZ0LCB4ID0gMCwgeSA9IDA7XHJcbiAgICB2YXIgb3ZlcmZsb3dpbmcgPSBvdmVyZmxvd2luZ0FuY2VzdG9yKGFjdGl2ZUVsZW1lbnQpO1xyXG5cclxuICAgIGlmICghb3ZlcmZsb3dpbmcpIHtcclxuICAgICAgICAvLyBDaHJvbWUgaWZyYW1lcyBzZWVtIHRvIGVhdCBrZXkgZXZlbnRzLCB3aGljaCB3ZSBuZWVkIHRvIFxyXG4gICAgICAgIC8vIHByb3BhZ2F0ZSB1cCwgaWYgdGhlIGlmcmFtZSBoYXMgbm90aGluZyBvdmVyZmxvd2luZyB0byBzY3JvbGxcclxuICAgICAgICByZXR1cm4gKGlzRnJhbWUgJiYgaXNDaHJvbWUpID8gcGFyZW50LmtleWRvd24oZXZlbnQpIDogdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY2xpZW50SGVpZ2h0ID0gb3ZlcmZsb3dpbmcuY2xpZW50SGVpZ2h0OyBcclxuXHJcbiAgICBpZiAob3ZlcmZsb3dpbmcgPT0gZG9jdW1lbnQuYm9keSkge1xyXG4gICAgICAgIGNsaWVudEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcclxuICAgICAgICBjYXNlIGtleS51cDpcclxuICAgICAgICAgICAgeSA9IC1vcHRpb25zLmFycm93U2Nyb2xsO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIGtleS5kb3duOlxyXG4gICAgICAgICAgICB5ID0gb3B0aW9ucy5hcnJvd1Njcm9sbDtcclxuICAgICAgICAgICAgYnJlYWs7ICAgICAgICAgXHJcbiAgICAgICAgY2FzZSBrZXkuc3BhY2ViYXI6IC8vICgrIHNoaWZ0KVxyXG4gICAgICAgICAgICBzaGlmdCA9IGV2ZW50LnNoaWZ0S2V5ID8gMSA6IC0xO1xyXG4gICAgICAgICAgICB5ID0gLXNoaWZ0ICogY2xpZW50SGVpZ2h0ICogMC45O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIGtleS5wYWdldXA6XHJcbiAgICAgICAgICAgIHkgPSAtY2xpZW50SGVpZ2h0ICogMC45O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIGtleS5wYWdlZG93bjpcclxuICAgICAgICAgICAgeSA9IGNsaWVudEhlaWdodCAqIDAuOTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBrZXkuaG9tZTpcclxuICAgICAgICAgICAgaWYgKG92ZXJmbG93aW5nID09IGRvY3VtZW50LmJvZHkgJiYgZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudClcclxuICAgICAgICAgICAgICAgIG92ZXJmbG93aW5nID0gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudDtcclxuICAgICAgICAgICAgeSA9IC1vdmVyZmxvd2luZy5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2Uga2V5LmVuZDpcclxuICAgICAgICAgICAgdmFyIHNjcm9sbCA9IG92ZXJmbG93aW5nLnNjcm9sbEhlaWdodCAtIG92ZXJmbG93aW5nLnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgdmFyIHNjcm9sbFJlbWFpbmluZyA9IHNjcm9sbCAtIGNsaWVudEhlaWdodDtcclxuICAgICAgICAgICAgeSA9IChzY3JvbGxSZW1haW5pbmcgPiAwKSA/IHNjcm9sbFJlbWFpbmluZyArIDEwIDogMDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBrZXkubGVmdDpcclxuICAgICAgICAgICAgeCA9IC1vcHRpb25zLmFycm93U2Nyb2xsO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIGtleS5yaWdodDpcclxuICAgICAgICAgICAgeCA9IG9wdGlvbnMuYXJyb3dTY3JvbGw7XHJcbiAgICAgICAgICAgIGJyZWFrOyAgICAgICAgICAgIFxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBhIGtleSB3ZSBkb24ndCBjYXJlIGFib3V0XHJcbiAgICB9XHJcblxyXG4gICAgc2Nyb2xsQXJyYXkob3ZlcmZsb3dpbmcsIHgsIHkpO1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIHNjaGVkdWxlQ2xlYXJDYWNoZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogTW91c2Vkb3duIGV2ZW50IG9ubHkgZm9yIHVwZGF0aW5nIGFjdGl2ZUVsZW1lbnRcclxuICovXHJcbmZ1bmN0aW9uIG1vdXNlZG93bihldmVudCkge1xyXG4gICAgYWN0aXZlRWxlbWVudCA9IGV2ZW50LnRhcmdldDtcclxufVxyXG5cclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBPVkVSRkxPV1xyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG52YXIgdW5pcXVlSUQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgIHJldHVybiBlbC51bmlxdWVJRCB8fCAoZWwudW5pcXVlSUQgPSBpKyspO1xyXG4gICAgfTtcclxufSkoKTtcclxuXHJcbnZhciBjYWNoZVggPSB7fTsgLy8gY2xlYXJlZCBvdXQgYWZ0ZXIgYSBzY3JvbGxpbmcgc2Vzc2lvblxyXG52YXIgY2FjaGVZID0ge307IC8vIGNsZWFyZWQgb3V0IGFmdGVyIGEgc2Nyb2xsaW5nIHNlc3Npb25cclxudmFyIGNsZWFyQ2FjaGVUaW1lcjtcclxudmFyIHNtb290aEJlaGF2aW9yRm9yRWxlbWVudCA9IHt9O1xyXG5cclxuLy9zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7IGNhY2hlID0ge307IH0sIDEwICogMTAwMCk7XHJcblxyXG5mdW5jdGlvbiBzY2hlZHVsZUNsZWFyQ2FjaGUoKSB7XHJcbiAgICBjbGVhclRpbWVvdXQoY2xlYXJDYWNoZVRpbWVyKTtcclxuICAgIGNsZWFyQ2FjaGVUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsgXHJcbiAgICAgICAgY2FjaGVYID0gY2FjaGVZID0gc21vb3RoQmVoYXZpb3JGb3JFbGVtZW50ID0ge307IFxyXG4gICAgfSwgMSoxMDAwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0Q2FjaGUoZWxlbXMsIG92ZXJmbG93aW5nLCB4KSB7XHJcbiAgICB2YXIgY2FjaGUgPSB4ID8gY2FjaGVYIDogY2FjaGVZO1xyXG4gICAgZm9yICh2YXIgaSA9IGVsZW1zLmxlbmd0aDsgaS0tOylcclxuICAgICAgICBjYWNoZVt1bmlxdWVJRChlbGVtc1tpXSldID0gb3ZlcmZsb3dpbmc7XHJcbiAgICByZXR1cm4gb3ZlcmZsb3dpbmc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENhY2hlKGVsLCB4KSB7XHJcbiAgICByZXR1cm4gKHggPyBjYWNoZVggOiBjYWNoZVkpW3VuaXF1ZUlEKGVsKV07XHJcbn1cclxuXHJcbi8vICAoYm9keSkgICAgICAgICAgICAgICAgKHJvb3QpXHJcbi8vICAgICAgICAgfCBoaWRkZW4gfCB2aXNpYmxlIHwgc2Nyb2xsIHwgIGF1dG8gIHxcclxuLy8gaGlkZGVuICB8ICAgbm8gICB8ICAgIG5vICAgfCAgIFlFUyAgfCAgIFlFUyAgfFxyXG4vLyB2aXNpYmxlIHwgICBubyAgIHwgICBZRVMgICB8ICAgWUVTICB8ICAgWUVTICB8XHJcbi8vIHNjcm9sbCAgfCAgIG5vICAgfCAgIFlFUyAgIHwgICBZRVMgIHwgICBZRVMgIHxcclxuLy8gYXV0byAgICB8ICAgbm8gICB8ICAgWUVTICAgfCAgIFlFUyAgfCAgIFlFUyAgfFxyXG5cclxuZnVuY3Rpb24gb3ZlcmZsb3dpbmdBbmNlc3RvcihlbCkge1xyXG4gICAgdmFyIGVsZW1zID0gW107XHJcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XHJcbiAgICB2YXIgcm9vdFNjcm9sbEhlaWdodCA9IHJvb3Quc2Nyb2xsSGVpZ2h0O1xyXG4gICAgZG8ge1xyXG4gICAgICAgIHZhciBjYWNoZWQgPSBnZXRDYWNoZShlbCwgZmFsc2UpO1xyXG4gICAgICAgIGlmIChjYWNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNldENhY2hlKGVsZW1zLCBjYWNoZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbGVtcy5wdXNoKGVsKTtcclxuICAgICAgICBpZiAocm9vdFNjcm9sbEhlaWdodCA9PT0gZWwuc2Nyb2xsSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHZhciB0b3BPdmVyZmxvd3NOb3RIaWRkZW4gPSBvdmVyZmxvd05vdEhpZGRlbihyb290KSAmJiBvdmVyZmxvd05vdEhpZGRlbihib2R5KTtcclxuICAgICAgICAgICAgdmFyIGlzT3ZlcmZsb3dDU1MgPSB0b3BPdmVyZmxvd3NOb3RIaWRkZW4gfHwgb3ZlcmZsb3dBdXRvT3JTY3JvbGwocm9vdCk7XHJcbiAgICAgICAgICAgIGlmIChpc0ZyYW1lICYmIGlzQ29udGVudE92ZXJmbG93aW5nKHJvb3QpIHx8IFxyXG4gICAgICAgICAgICAgICAhaXNGcmFtZSAmJiBpc092ZXJmbG93Q1NTKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0Q2FjaGUoZWxlbXMsIGdldFNjcm9sbFJvb3QoKSk7IFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc0NvbnRlbnRPdmVyZmxvd2luZyhlbCkgJiYgb3ZlcmZsb3dBdXRvT3JTY3JvbGwoZWwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXRDYWNoZShlbGVtcywgZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH0gd2hpbGUgKChlbCA9IGVsLnBhcmVudEVsZW1lbnQpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNDb250ZW50T3ZlcmZsb3dpbmcoZWwpIHtcclxuICAgIHJldHVybiAoZWwuY2xpZW50SGVpZ2h0ICsgMTAgPCBlbC5zY3JvbGxIZWlnaHQpO1xyXG59XHJcblxyXG4vLyB0eXBpY2FsbHkgZm9yIDxib2R5PiBhbmQgPGh0bWw+XHJcbmZ1bmN0aW9uIG92ZXJmbG93Tm90SGlkZGVuKGVsKSB7XHJcbiAgICB2YXIgb3ZlcmZsb3cgPSBnZXRDb21wdXRlZFN0eWxlKGVsLCAnJykuZ2V0UHJvcGVydHlWYWx1ZSgnb3ZlcmZsb3cteScpO1xyXG4gICAgcmV0dXJuIChvdmVyZmxvdyAhPT0gJ2hpZGRlbicpO1xyXG59XHJcblxyXG4vLyBmb3IgYWxsIG90aGVyIGVsZW1lbnRzXHJcbmZ1bmN0aW9uIG92ZXJmbG93QXV0b09yU2Nyb2xsKGVsKSB7XHJcbiAgICB2YXIgb3ZlcmZsb3cgPSBnZXRDb21wdXRlZFN0eWxlKGVsLCAnJykuZ2V0UHJvcGVydHlWYWx1ZSgnb3ZlcmZsb3cteScpO1xyXG4gICAgcmV0dXJuIChvdmVyZmxvdyA9PT0gJ3Njcm9sbCcgfHwgb3ZlcmZsb3cgPT09ICdhdXRvJyk7XHJcbn1cclxuXHJcbi8vIGZvciBhbGwgb3RoZXIgZWxlbWVudHNcclxuZnVuY3Rpb24gaXNTY3JvbGxCZWhhdmlvclNtb290aChlbCkge1xyXG4gICAgdmFyIGlkID0gdW5pcXVlSUQoZWwpO1xyXG4gICAgaWYgKHNtb290aEJlaGF2aW9yRm9yRWxlbWVudFtpZF0gPT0gbnVsbCkge1xyXG4gICAgICAgIHZhciBzY3JvbGxCZWhhdmlvciA9IGdldENvbXB1dGVkU3R5bGUoZWwsICcnKVsnc2Nyb2xsLWJlaGF2aW9yJ107XHJcbiAgICAgICAgc21vb3RoQmVoYXZpb3JGb3JFbGVtZW50W2lkXSA9ICgnc21vb3RoJyA9PSBzY3JvbGxCZWhhdmlvcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc21vb3RoQmVoYXZpb3JGb3JFbGVtZW50W2lkXTtcclxufVxyXG5cclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBIRUxQRVJTXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmZ1bmN0aW9uIGFkZEV2ZW50KHR5cGUsIGZuLCBhcmcpIHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBhcmcgfHwgZmFsc2UpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVFdmVudCh0eXBlLCBmbiwgYXJnKSB7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgYXJnIHx8IGZhbHNlKTsgIFxyXG59XHJcblxyXG5mdW5jdGlvbiBpc05vZGVOYW1lKGVsLCB0YWcpIHtcclxuICAgIHJldHVybiBlbCAmJiAoZWwubm9kZU5hbWV8fCcnKS50b0xvd2VyQ2FzZSgpID09PSB0YWcudG9Mb3dlckNhc2UoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGlyZWN0aW9uQ2hlY2soeCwgeSkge1xyXG4gICAgeCA9ICh4ID4gMCkgPyAxIDogLTE7XHJcbiAgICB5ID0gKHkgPiAwKSA/IDEgOiAtMTtcclxuICAgIGlmIChkaXJlY3Rpb24ueCAhPT0geCB8fCBkaXJlY3Rpb24ueSAhPT0geSkge1xyXG4gICAgICAgIGRpcmVjdGlvbi54ID0geDtcclxuICAgICAgICBkaXJlY3Rpb24ueSA9IHk7XHJcbiAgICAgICAgcXVlID0gW107XHJcbiAgICAgICAgbGFzdFNjcm9sbCA9IDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmlmICh3aW5kb3cubG9jYWxTdG9yYWdlICYmIGxvY2FsU3RvcmFnZS5TU19kZWx0YUJ1ZmZlcikge1xyXG4gICAgdHJ5IHsgLy8gIzQ2IFNhZmFyaSB0aHJvd3MgaW4gcHJpdmF0ZSBicm93c2luZyBmb3IgbG9jYWxTdG9yYWdlIFxyXG4gICAgICAgIGRlbHRhQnVmZmVyID0gbG9jYWxTdG9yYWdlLlNTX2RlbHRhQnVmZmVyLnNwbGl0KCcsJyk7XHJcbiAgICB9IGNhdGNoIChlKSB7IH0gXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzVG91Y2hwYWQoZGVsdGFZKSB7XHJcbiAgICBpZiAoIWRlbHRhWSkgcmV0dXJuO1xyXG4gICAgaWYgKCFkZWx0YUJ1ZmZlci5sZW5ndGgpIHtcclxuICAgICAgICBkZWx0YUJ1ZmZlciA9IFtkZWx0YVksIGRlbHRhWSwgZGVsdGFZXTtcclxuICAgIH1cclxuICAgIGRlbHRhWSA9IE1hdGguYWJzKGRlbHRhWSk7XHJcbiAgICBkZWx0YUJ1ZmZlci5wdXNoKGRlbHRhWSk7XHJcbiAgICBkZWx0YUJ1ZmZlci5zaGlmdCgpO1xyXG4gICAgY2xlYXJUaW1lb3V0KGRlbHRhQnVmZmVyVGltZXIpO1xyXG4gICAgZGVsdGFCdWZmZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRyeSB7IC8vICM0NiBTYWZhcmkgdGhyb3dzIGluIHByaXZhdGUgYnJvd3NpbmcgZm9yIGxvY2FsU3RvcmFnZVxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UuU1NfZGVsdGFCdWZmZXIgPSBkZWx0YUJ1ZmZlci5qb2luKCcsJyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyB9ICBcclxuICAgIH0sIDEwMDApO1xyXG4gICAgdmFyIGRwaVNjYWxlZFdoZWVsRGVsdGEgPSBkZWx0YVkgPiAxMjAgJiYgYWxsRGVsdGFzRGl2aXNhYmxlQnkoZGVsdGFZKTsgLy8gd2luNjQgXHJcbiAgICByZXR1cm4gIWFsbERlbHRhc0RpdmlzYWJsZUJ5KDEyMCkgJiYgIWFsbERlbHRhc0RpdmlzYWJsZUJ5KDEwMCkgJiYgIWRwaVNjYWxlZFdoZWVsRGVsdGE7XHJcbn0gXHJcblxyXG5mdW5jdGlvbiBpc0RpdmlzaWJsZShuLCBkaXZpc29yKSB7XHJcbiAgICByZXR1cm4gKE1hdGguZmxvb3IobiAvIGRpdmlzb3IpID09IG4gLyBkaXZpc29yKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWxsRGVsdGFzRGl2aXNhYmxlQnkoZGl2aXNvcikge1xyXG4gICAgcmV0dXJuIChpc0RpdmlzaWJsZShkZWx0YUJ1ZmZlclswXSwgZGl2aXNvcikgJiZcclxuICAgICAgICAgICAgaXNEaXZpc2libGUoZGVsdGFCdWZmZXJbMV0sIGRpdmlzb3IpICYmXHJcbiAgICAgICAgICAgIGlzRGl2aXNpYmxlKGRlbHRhQnVmZmVyWzJdLCBkaXZpc29yKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzSW5zaWRlWW91dHViZVZpZGVvKGV2ZW50KSB7XHJcbiAgICB2YXIgZWxlbSA9IGV2ZW50LnRhcmdldDtcclxuICAgIHZhciBpc0NvbnRyb2wgPSBmYWxzZTtcclxuICAgIGlmIChkb2N1bWVudC5VUkwuaW5kZXhPZiAoJ3d3dy55b3V0dWJlLmNvbS93YXRjaCcpICE9IC0xKSB7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBpc0NvbnRyb2wgPSAoZWxlbS5jbGFzc0xpc3QgJiYgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5jb250YWlucygnaHRtbDUtdmlkZW8tY29udHJvbHMnKSk7XHJcbiAgICAgICAgICAgIGlmIChpc0NvbnRyb2wpIGJyZWFrO1xyXG4gICAgICAgIH0gd2hpbGUgKChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNDb250cm9sO1xyXG59XHJcblxyXG52YXIgcmVxdWVzdEZyYW1lID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICAgIHx8IFxyXG4gICAgICAgICAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgXHJcbiAgICAgICAgICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSAgICB8fFxyXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChjYWxsYmFjaywgZWxlbWVudCwgZGVsYXkpIHtcclxuICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkgfHwgKDEwMDAvNjApKTtcclxuICAgICAgICAgICAgIH0pO1xyXG59KSgpO1xyXG5cclxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSAod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5Nb3pNdXRhdGlvbk9ic2VydmVyKTsgIFxyXG5cclxudmFyIGdldFNjcm9sbFJvb3QgPSAoZnVuY3Rpb24oKSB7XHJcbiAgdmFyIFNDUk9MTF9ST09UID0gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudDtcclxuICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoIVNDUk9MTF9ST09UKSB7XHJcbiAgICAgIHZhciBkdW1teSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBkdW1teS5zdHlsZS5jc3NUZXh0ID0gJ2hlaWdodDoxMDAwMHB4O3dpZHRoOjFweDsnO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGR1bW15KTtcclxuICAgICAgdmFyIGJvZHlTY3JvbGxUb3AgID0gZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7XHJcbiAgICAgIHZhciBkb2NFbFNjcm9sbFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICAgIHdpbmRvdy5zY3JvbGxCeSgwLCAzKTtcclxuICAgICAgaWYgKGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wICE9IGJvZHlTY3JvbGxUb3ApXHJcbiAgICAgICAgKFNDUk9MTF9ST09UID0gZG9jdW1lbnQuYm9keSk7XHJcbiAgICAgIGVsc2UgXHJcbiAgICAgICAgKFNDUk9MTF9ST09UID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcclxuICAgICAgd2luZG93LnNjcm9sbEJ5KDAsIC0zKTtcclxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkdW1teSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU0NST0xMX1JPT1Q7XHJcbiAgfTtcclxufSkoKTtcclxuXHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogUFVMU0UgKGJ5IE1pY2hhZWwgSGVyZilcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gXHJcbi8qKlxyXG4gKiBWaXNjb3VzIGZsdWlkIHdpdGggYSBwdWxzZSBmb3IgcGFydCBhbmQgZGVjYXkgZm9yIHRoZSByZXN0LlxyXG4gKiAtIEFwcGxpZXMgYSBmaXhlZCBmb3JjZSBvdmVyIGFuIGludGVydmFsIChhIGRhbXBlZCBhY2NlbGVyYXRpb24pLCBhbmRcclxuICogLSBMZXRzIHRoZSBleHBvbmVudGlhbCBibGVlZCBhd2F5IHRoZSB2ZWxvY2l0eSBvdmVyIGEgbG9uZ2VyIGludGVydmFsXHJcbiAqIC0gTWljaGFlbCBIZXJmLCBodHRwOi8vc3RlcmVvcHNpcy5jb20vc3RvcHBpbmcvXHJcbiAqL1xyXG5mdW5jdGlvbiBwdWxzZV8oeCkge1xyXG4gICAgdmFyIHZhbCwgc3RhcnQsIGV4cHg7XHJcbiAgICAvLyB0ZXN0XHJcbiAgICB4ID0geCAqIG9wdGlvbnMucHVsc2VTY2FsZTtcclxuICAgIGlmICh4IDwgMSkgeyAvLyBhY2NlbGVhcnRpb25cclxuICAgICAgICB2YWwgPSB4IC0gKDEgLSBNYXRoLmV4cCgteCkpO1xyXG4gICAgfSBlbHNlIHsgICAgIC8vIHRhaWxcclxuICAgICAgICAvLyB0aGUgcHJldmlvdXMgYW5pbWF0aW9uIGVuZGVkIGhlcmU6XHJcbiAgICAgICAgc3RhcnQgPSBNYXRoLmV4cCgtMSk7XHJcbiAgICAgICAgLy8gc2ltcGxlIHZpc2NvdXMgZHJhZ1xyXG4gICAgICAgIHggLT0gMTtcclxuICAgICAgICBleHB4ID0gMSAtIE1hdGguZXhwKC14KTtcclxuICAgICAgICB2YWwgPSBzdGFydCArIChleHB4ICogKDEgLSBzdGFydCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbCAqIG9wdGlvbnMucHVsc2VOb3JtYWxpemU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHB1bHNlKHgpIHtcclxuICAgIGlmICh4ID49IDEpIHJldHVybiAxO1xyXG4gICAgaWYgKHggPD0gMCkgcmV0dXJuIDA7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMucHVsc2VOb3JtYWxpemUgPT0gMSkge1xyXG4gICAgICAgIG9wdGlvbnMucHVsc2VOb3JtYWxpemUgLz0gcHVsc2VfKDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHB1bHNlXyh4KTtcclxufVxyXG5cclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBGSVJTVCBSVU5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxudmFyIHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xyXG52YXIgaXNFZGdlICAgID0gL0VkZ2UvLnRlc3QodXNlckFnZW50KTsgLy8gdGhhbmsgeW91IE1TXHJcbnZhciBpc0Nocm9tZSAgPSAvY2hyb21lL2kudGVzdCh1c2VyQWdlbnQpICYmICFpc0VkZ2U7IFxyXG52YXIgaXNTYWZhcmkgID0gL3NhZmFyaS9pLnRlc3QodXNlckFnZW50KSAmJiAhaXNFZGdlOyBcclxudmFyIGlzTW9iaWxlICA9IC9tb2JpbGUvaS50ZXN0KHVzZXJBZ2VudCk7XHJcbnZhciBpc0lFV2luNyAgPSAvV2luZG93cyBOVCA2LjEvaS50ZXN0KHVzZXJBZ2VudCkgJiYgL3J2OjExL2kudGVzdCh1c2VyQWdlbnQpO1xyXG52YXIgaXNPbGRTYWZhcmkgPSBpc1NhZmFyaSAmJiAoL1ZlcnNpb25cXC84L2kudGVzdCh1c2VyQWdlbnQpIHx8IC9WZXJzaW9uXFwvOS9pLnRlc3QodXNlckFnZW50KSk7XHJcbnZhciBpc0VuYWJsZWRGb3JCcm93c2VyID0gKGlzQ2hyb21lIHx8IGlzU2FmYXJpIHx8IGlzSUVXaW43KSAmJiAhaXNNb2JpbGU7XHJcblxyXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XHJcbnRyeSB7XHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIG51bGwsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcclxuICAgICAgICB9IFxyXG4gICAgfSkpO1xyXG59IGNhdGNoKGUpIHt9XHJcblxyXG52YXIgd2hlZWxPcHQgPSBzdXBwb3J0c1Bhc3NpdmUgPyB7IHBhc3NpdmU6IGZhbHNlIH0gOiBmYWxzZTtcclxudmFyIHdoZWVsRXZlbnQgPSAnb253aGVlbCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgPyAnd2hlZWwnIDogJ21vdXNld2hlZWwnOyBcclxuXHJcbmlmICh3aGVlbEV2ZW50ICYmIGlzRW5hYmxlZEZvckJyb3dzZXIpIHtcclxuICAgIGFkZEV2ZW50KHdoZWVsRXZlbnQsIHdoZWVsLCB3aGVlbE9wdCk7XHJcbiAgICBhZGRFdmVudCgnbW91c2Vkb3duJywgbW91c2Vkb3duKTtcclxuICAgIGFkZEV2ZW50KCdsb2FkJywgaW5pdCk7XHJcbn1cclxuXHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogUFVCTElDIElOVEVSRkFDRVxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5mdW5jdGlvbiBTbW9vdGhTY3JvbGwob3B0aW9uc1RvU2V0KSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9uc1RvU2V0KVxyXG4gICAgICAgIGlmIChkZWZhdWx0T3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSBcclxuICAgICAgICAgICAgb3B0aW9uc1trZXldID0gb3B0aW9uc1RvU2V0W2tleV07XHJcbn1cclxuU21vb3RoU2Nyb2xsLmRlc3Ryb3kgPSBjbGVhbnVwO1xyXG5cclxuaWYgKHdpbmRvdy5TbW9vdGhTY3JvbGxPcHRpb25zKSAvLyBhc3luYyBBUElcclxuICAgIFNtb290aFNjcm9sbCh3aW5kb3cuU21vb3RoU2Nyb2xsT3B0aW9ucyk7XHJcblxyXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxyXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBTbW9vdGhTY3JvbGw7XHJcbiAgICB9KTtcclxuZWxzZSBpZiAoJ29iamVjdCcgPT0gdHlwZW9mIGV4cG9ydHMpXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFNtb290aFNjcm9sbDtcclxuZWxzZVxyXG4gICAgd2luZG93LlNtb290aFNjcm9sbCA9IFNtb290aFNjcm9sbDtcclxuXHJcbn0pKCk7Il19
